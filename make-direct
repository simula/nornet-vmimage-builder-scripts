#!/usr/bin/env bash
#
# Template VM Image Builder
# Copyright (C) 2017-2025 by Thomas Dreibholz
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Contact: thomas.dreibholz@gmail.com

set -eu



VIDEO="1024x768"
USER_NAME="nornetpp"
USER_REALNAME="NorNet Praesum Presum"

BOOTSPLASH="/usr/share/bootsplash/Bjørnsund-3840x2160.jpeg"
BACKGROUND_SDDM="/usr/share/desktop/Nordmarka-3840x2160-mosaic.jpeg"
BACKGROUND_LOCKSCREEN="/usr/share/desktop/Flåm-3840x2160-mosaic.jpeg"
BACKGROUND_DESKTOP="/usr/share/desktop/Flåm-3840x2160-plain.jpeg"


# ###### Check/set environment variables ####################################
if [ ! -e /etc/os-release ] ; then
   echo >&2 "ERROR: /etc/os-release does not exist!"
   exit 1
fi
. /etc/os-release


# ###### Handle command-line parameters #####################################
if [ $# -lt 1 ] ; then
   echo >&2 "Usage: $0 project"
   echo >&2 "Example: $0 HiPerConTracer"
   exit 1
fi
PROJECT="$1"
shift 1
while [ $# -gt 0 ] ; do
   if [ "$1" == "--video" ] || [ "$1" == "-V" ] ; then
      VIDEO="$2"
      if [ "${VIDEO}" == "XGA" ] ; then
         VIDEO="1024x768"   # Standard, 4:3
      elif [ "${VIDEO}" == "SXGA" ] ; then
         VIDEO="1280x960"   # SXGA, 4:3
      elif [ "${VIDEO}" == "HD" ] ; then
         VIDEO="1280x720"   # HD, 16:9
      elif [ "${VIDEO}" == "HD+" ] ; then
         VIDEO="1600x900"   # HD+, 16:9
      elif [ "${VIDEO}" == "FHD" ] ; then
         VIDEO="1920x1080"  # Full HD, 16:9
      elif [ "${VIDEO}" == "UHD" ] ; then
         VIDEO="3840x2160"  # 4K, 16:9
      fi
      if [ "${VIDEO}" != "NA" ] ; then
         if [[ ! "${VIDEO}" =~ ^[0-9]+x[0-9]+$ ]] ; then
            echo >&2 "ERROR: Bad video setting: ${VIDEO}"
            exit 1
         fi
      fi
      shift
   elif [ "$1" == "--username" ] || [ "$1" == "-u" ] ; then
      USER_NAME="$2"
      shift
   elif [ "$1" == "--realname" ] || [ "$1" == "-r" ] ; then
      USER_REALNAME="$2"
      shift
   elif [ "$1" == "--bootsplash" ] || [ "$1" == "-BB" ] ; then
      BOOTSPLASH="$2"
      shift
   elif [ "$1" == "--background-sddm" ] || [ "$1" == "-BS" ] ; then
      BACKGROUND_SDDM="$2"
      shift
   elif [ "$1" == "--background-lockscreen" ] || [ "$1" == "-BL" ] ; then
      BACKGROUND_LOCKSCREEN="$2"
      shift
   elif [ "$1" == "--background-desktop" ] || [ "$1" == "-BD" ] ; then
      BACKGROUND_DESKTOP="$2"
      shift
   else
      echo >&2 "ERROR: Unknown option $1!"
      echo >&2 "Usage: $0"
      echo >&2 "   [--user|-u username]"
      echo >&2 "   [--realname|-r real_user_name]"
      echo >&2 "   [--background-sddm|-BD image_file]"
      echo >&2 "   [--background-lockscreen|-BL image_file]"
      echo >&2 "   [--background-desktop|-BD image_file]"
      exit 1
   fi
   shift
done


# ###### Get provisioners ###################################################
pushd >/dev/null projects
CONFIG="${PROJECT}.config"
if [ ! -e "${CONFIG}" ] ; then
   echo >&2: "ERROR: Project configuration ${CONFIG} not found!"
   exit 1
fi
PROVISIONERS=""
# shellcheck disable=SC1090
. ./"${CONFIG}"
PROVISIONERS="$(echo "${PROVISIONERS}" | xargs -n1 | sort -u)"
popd >/dev/null


# ###### Ensure that the generated files are there ##########################
pushd >/dev/null files

# ------ Get background build dependencies, and generate the backgrounds ----
if [ "${ID}" == "ubuntu" ] || [ "${ID}" == "debian" ] ; then
   sudo env DEBIAN_FRONTEND=noninteractive /usr/bin/apt-get install -y --no-install-recommends \
      cmake fonts-dejavu fonts-noto gimp graphicsmagick libimage-exiftool-perl
elif [ "${ID}" == "fedora" ] ; then
   sudo /usr/bin/dnf install --setopt=install_weak_deps=False -y \
      awk cmake dejavu-sans-fonts gcc google-noto-sans-fonts GraphicsMagick gimp perl-Image-ExifTool
   sudo fc-cache -f
elif [ "${ID}" == "freebsd" ] ; then
   sudo /usr/sbin/pkg install -y \
      cmake dejavu gimp3-app noto-sans GraphicsMagick p5-Image-ExifTool
   sudo fc-cache -f
fi
./generate-backgrounds

popd >/dev/null


# ###### Run provisioners ###################################################
for provisioner in ${PROVISIONERS} ; do
   echo ""
   echo -e "\x1b[34mRunning ${provisioner} ...\x1b[0m"
   echo ""

   if [ -e "files/${provisioner}" ] ; then
      while read -r s destination ; do
         if [ "${s}" != "" ] && [[ ! "${s}" =~ ^# ]] ; then
            source="$(realpath files/"${s}")"
            if [ ! -e "${source}" ] ; then
               echo >&2 "ERROR: Cannot find source file ${source} in files/${provisioner}!"
               exit 1
            fi
            if [ "${destination}" == "" ] ; then
               echo >&2 "ERROR: Destination has to be provided in files/${provisioner}!"
               exit 1
            fi
            if [[ "${destination}" =~ [/]$ ]] ; then
               mkdir -p "${destination}"
            else
               mkdir -p "$(dirname "${destination}")"
            fi
            echo "Copying ${source} to ${destination} ..."
            cp "${source}" "${destination}"
         fi
      done <"files/${provisioner}"
   fi

   sudo env \
      VIDEO="${VIDEO}" \
      USER_NAME="${USER_NAME}" \
      USER_REALNAME="${USER_REALNAME}" \
      BOOTSPLASH="${BOOTSPLASH}" \
      BACKGROUND_SDDM="${BACKGROUND_SDDM}" \
      BACKGROUND_LOCKSCREEN="${BACKGROUND_LOCKSCREEN}" \
      BACKGROUND_DESKTOP="${BACKGROUND_DESKTOP}" \
      "scripts/${provisioner}"

done
