#cloud-config
#
# Ubuntu Preseed Configuration
# Copyright (C) 2019-2025 by Thomas Dreibholz
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Contact: thomas.dreibholz@gmail.com


# Preseed documentation:
# - https://ubuntu.com/server/docs/install/autoinstall
# - https://ubuntu.com/server/docs/install/autoinstall-reference
# - https://github.com/CanonicalLtd/subiquity
# - https://askubuntu.com/questions/1235723/automated-20-04-server-installation-using-pxe-and-live-server-image


autoinstall:
  # ###### Installer Configuration ##########################################
  version: 1
  refresh-installer:
    update: true
    channel: stable


  # ###### Locale and Keyboard Configuration ################################
  # Using Irish locale (â‚¬, metric units, etc.), but late-commands sets British
  # time format (24-hour clock). Other locales are added in late-command!
  locale: en_IE.UTF-8
  keyboard:
    layout: <SET_XKBLAYOUT_HERE>
    variant: <SET_XKBVARIANT_HERE>


  # ###### Storage Configuration ############################################
  storage:
    grub:
      reorder_uefi: false
    swap:
      size: 0

    config:
      # ====== Disks ========================================================
      - type: disk
        id: disk0
        name: "system-disk"
        path: <SET_ROOT_DISK_DEVICE_HERE>
        wipe: superblock
        ptable: gpt
        preserve: false
        grub_device: true
      # - type: disk
      #   id: disk1
      #   name: "home-disk"
      #   path: <SET_HOME_DISK_DEVICE_HERE>
      #   wipe: superblock
      #   ptable: gpt
      #   preserve: false
      #   grub_device: false
      # - type: disk
      #   id: disk2
      #   name: "swap-disk"
      #   path: <SET_SWAP_DISK_DEVICE_HERE>
      #   wipe: superblock
      #   ptable: gpt
      #   preserve: false
      #   grub_device: false

      # ====== BIOS Grub ====================================================
      # NOTE: Will be created later manually!
      # - id: disk0-partition-grub
      #   type: partition
      #   device: disk0
      #   size: 1048576
      #   flag: bios_grub
      #   #grub_device: true
      #   preserve: false

      # ====== EFI ==========================================================
      - id: disk0-partition-efi
        type: partition
        device: disk0
        size: 31457280
        flag: boot
        grub_device: true
        preserve: false
      - id: disk0-partition-efi-format
        type: format
        fstype: fat16
        label: EFI
        volume: disk0-partition-efi
        preserve: false

      # ====== System =======================================================
      - id: disk0-partition-system
        type: partition
        device: disk0
        size: -1
        flag: linux
        grub_device: false
        preserve: false
      - id: disk0-partition-system-format
        type: format
        fstype: btrfs
        label: System
        volume: disk0-partition-system
        preserve: false

      # ====== Home =========================================================
      # - id: disk1-partition-home
      #   type: partition
      #   device: disk1
      #   size: -1
      #   flag: linux
      #   grub_device: false
      #   preserve: false
      # - id: disk1-partition-home-format
      #   type: format
      #   fstype: btrfs
      #   label: Home
      #   volume: disk1-partition-home
      #   preserve: false

      # ====== Swap =========================================================
      # - id: disk2-partition-swap
      #   type: partition
      #   device: disk2
      #   size: -1
      #   flag: linux
      #   grub_device: false
      #   preserve: false
      # - id: disk2-partition-swap-format
      #   type: format
      #   fstype: swap
      #   label: Swap
      #   volume: disk2-partition-swap
      #   preserve: false

      # ====== Mount points =================================================
      - id: disk0-partition-system-mount
        type: mount
        path: /
        device: disk0-partition-system-format
        preserve: false
      - id: disk0-partition-efi-mount
        type: mount
        path: /boot/efi
        device: disk0-partition-efi-format
        preserve: false
      # - id: disk1-partition-home-mount
      #   type: mount
      #   path: /home
      #   device: disk1-partition-home-format
      #   preserve: false
      # - id: disk2-partition-swap-mount
      #   type: mount
      #   path: none
      #   device: disk2-partition-swap-format
      #   preserve: false


  # ###### Host and User Configuration ######################################
  identity:
    hostname: <SET_HOSTFQDN_HERE>
    username: <SET_USERNAME_HERE>
    realname: "<SET_REALNAME_HERE>"
    password: "<SET_HASHED_PASSWORD_HERE>"


  # ###### Package Management ###############################################
  apt:
    preserve_sources_list: false
    geoip: true
    primary:
      - arches: [default]
        uri: "http://dk.archive.ubuntu.com/ubuntu"
  packages:
    - qemu-guest-agent
    - virt-what
  ssh:
    install-server: true


  # ###### Post-Install Configuration #######################################
  late-commands:
    # ====== QEMU Guest Agent ===============================================
    - |
      set -ex
      # qemu-guest-agent has to be installed in advance, since apt-get
      # cannot download here any more => remove, if unnecessary.
      if [ ! "$(chroot /target virt-what)" = "kvm" ] ; then
         chroot /target apt-get autoremove --purge -y qemu-guest-agent
      fi
    # ====== Let Netplan ask the DHCP or DNS server for the hostname ========
    - |
      if [ "$(hostname)" = "localhost" ] ; then
         chroot /target rm -f /etc/hostname
      fi
    # ====== Add partition names ============================================
    - sgdisk --change-name=1:EFI --change-name=2:Root <SET_ROOT_DISK_DEVICE_HERE>
    - if [ -e <SET_HOME_DISK_DEVICE_HERE> ] ; then sgdisk --change-name=1:Home <SET_HOME_DISK_DEVICE_HERE> ; fi
    - if [ -e <SET_SWAP_DISK_DEVICE_HERE> ] ; then sgdisk --change-name=1:Swap --typecode=1:8200 <SET_SWAP_DISK_DEVICE_HERE> ; fi
    # ====== Generate additional locales ====================================
    - chroot /target locale-gen --keep-existing ar_SA.UTF-8 bs_BA.UTF-8 da_DK.UTF-8 de_AT.UTF-8 de_CH.UTF-8 de_DE.UTF-8 en_AU.UTF-8 en_DK.UTF-8 en_GB.UTF-8 en_IE.UTF-8 en_US.UTF-8 en_ZA.UTF-8 nb_NO.UTF-8 nn_NO.UTF-8 ro_RO.UTF-8 sk_SK.UTF-8 zh_CN.UTF-8
    # ====== BTRFS subvolume setup ==========================================
    - |
      set -ex
      # ------ Obtain devices and their UUIDs -------------------------------
      EFI_DEV=$(awk '$2 == "/target/boot/efi" { print $1 }' /proc/mounts)
      ROOT_DEV=$(awk '$2 ~ "^/target$" { print $1 }' /proc/mounts)
      ROOT_UUID=$(blkid -o value $ROOT_DEV | head -n2 | tail -n1)
      HOME_DEV=""
      HOME_UUID=""
      SWAP_DEV=""
      SWAP_UUID=""
      if [ -e <SET_HOME_DISK_DEVICE_HERE> ] ; then
         HOME_DEV=$(awk '$2 ~ "^/target/home$" { print $1 }' /proc/mounts)
         HOME_UUID=$(blkid -o value $HOME_DEV | head -n2 | tail -n1)
      fi
      if [ -e <SET_SWAP_DISK_DEVICE_HERE> ] ; then
         SWAP_DEV="<SET_SWAP_DISK_DEVICE_HERE>1"
         SWAP_UUID=$(blkid -o value $SWAP_DEV | head -n2 | tail -n1)
      fi
      # ------ Create snapshots: @ for / and @home for /home ----------------
      btrfs subvolume snapshot /target /target/@
      if [ "$HOME_UUID" != "" ] ; then
         btrfs subvolume snapshot /target/home /target/home/@home
         find /target/home -mindepth 1 -maxdepth 1 -not -name @home -exec rm -rf '{}' \;
      fi
      awk '$2 ~ "^/target/" { print $2 }' /proc/mounts | xargs umount || true
      find /target -mindepth 1 -maxdepth 1 -not -name @ -exec rm -rf '{}' \;
      # ------ Mount / and /home --------------------------------------------
      mkdir /mnt/rootfs
      mount -o subvol=@ $ROOT_DEV /mnt/rootfs
      if [ "$HOME_UUID" != "" ] ; then
         mount -o subvol=@home $HOME_DEV /mnt/rootfs/home
      fi
      # ------ Update /etc/fstab --------------------------------------------
      sed -i "/$ROOT_UUID/s/defaults/defaults,subvol=@/" /mnt/rootfs/etc/fstab
      if [ "$HOME_UUID" != "" ] ; then
         sed -i "/$HOME_UUID/s/defaults/defaults,subvol=@home/" /mnt/rootfs/etc/fstab
      else
         btrfs subvolume create /target/@home
         echo "/dev/disk/by-uuid/$ROOT_UUID /home btrfs defaults,subvol=@home 0 0" >> /mnt/rootfs/etc/fstab
      fi
      if [ "$SWAP_UUID" != "" ] ; then
         sed -i "/$SWAP_UUID/s/ sw / sw,discard /" /mnt/rootfs/etc/fstab
      fi
      # ------ Update /target -----------------------------------------------
      umount /target
      mount --bind /mnt/rootfs /target
      # ------ Update Grub configuration ------------------------------------
      mount $EFI_DEV /mnt/rootfs/boot/efi
      mount -o bind /dev  /mnt/rootfs/dev
      mount -o bind /sys  /mnt/rootfs/sys
      mount -o bind /proc /mnt/rootfs/proc
      chroot /mnt/rootfs update-grub
      chroot /mnt/rootfs grub-install --efi-directory=/boot/efi
    # ====== Remove snapd (can be installed explicitly later, if needed) ====
    - |
      chroot /mnt/rootfs apt-get autoremove -y --purge snapd
      echo -en "# Prevent the installation of snapd:\nPackage: snapd\nPin: release a=*\nPin-Priority: -16\n" >/mnt/rootfs/etc/apt/preferences.d/block-snapd.pref
