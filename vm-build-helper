#!/usr/bin/env bash
#
# Template VM Image Builder
# Copyright (C) 2017-2025 by Thomas Dreibholz
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Contact: thomas.dreibholz@gmail.com

set -eu


# ###### Configure ##########################################################

# ====== Directories ========================================================
. ./directories.config

if [ ! -e "${OUTPUT_DIRECTORY}" ] ; then
   echo >&2 "ERROR: Output directory ${OUTPUT_DIRECTORY} does not exist!"
   exit 1
fi
mkdir -p "${CACHE_DIRECTORY}" || true
if [ ! -e "${CACHE_DIRECTORY}" ] ; then
   echo >&2 "ERROR: Cache directory ${CACHE_DIRECTORY} does not exist!"
   exit 1
fi

# ====== Default architecture ===============================================
ARCHITECTURES="$(uname -m)"
ARCHITECTURES="${ARCHITECTURES/x86_64/amd64}"


# ###### Check for invalid combinations #####################################
check-vm-config ()
{
   local project="$1"
   local distribution="$2"
   local release="$3"
   local architecture="$4"

   if [ "${distribution}" == "Debian" ] ; then
      # shellcheck disable=SC2071
      if [ "${architecture}" == "ppc64le" ] && [[ "${release}" < "12" ]] ; then
         return 1
      elif [ "${architecture}" == "riscv64" ] && [[ "${release}" < "13" ]] ; then
         return 1
      elif [ "${architecture}" == "s390x" ] && [[ "${release}" < "12" ]] ; then
         return 1
      fi

      if [ "${project}" == "NorNet" ] || [ "${project}" == "NorNet-Desktop" ] ; then
         return 1
      fi

   elif [ "${distribution}" == "Ubuntu" ] ; then
      # shellcheck disable=SC2072
      if [[ "${architecture}" =~ ^(i386|arm32) ]] ; then
         return 1
      elif [ "${architecture}" == "riscv64" ] && [[ "${release}" < "20.04" ]] ; then
         return 1
      fi

   elif [ "${distribution}" == "Fedora" ] ; then
      if [[ "${architecture}" =~ ^(i386|arm32|riscv64) ]] ; then
         return 1
      fi
   fi

   return 0
}


# ###### Build VMs ##########################################################
build-defined-vms ()
{
   local delay=0
   if [ $# -gt 0 ] ; then
      delay="$1"
   fi
   if [[ ! "${delay}" =~ ^[0-9]+$ ]] ; then
      delay=0
   fi

   isFirst=1
   for project in ${PROJECTS} ; do
      for system in ${SYSTEMS} ; do
         for architecture in ${ARCHITECTURES} ; do

            # shellcheck disable=SC2001
            distribution=$(echo "${system}" | sed -e "s/-.*$//g")
            # shellcheck disable=SC2001
            release=$(echo "${system}" | sed -e "s/^[^\-]*-//g")

            # ====== Filter out unsupported combinations =======================
            if ! check-vm-config "${project}" "${distribution}" "${release}" "${architecture}" ; then
               echo "${project}/${architecture^^}-${project}-${distribution}-${release} is not supported (yet)."
               continue
            fi

            # ====== Build VM ==================================================
            if [ "${HYPERVISOR}" != "Docker" ] ; then
               name="${HYPERVISOR}-${project}-${distribution}-${release}"
            else
               name="${HYPERVISOR}-${architecture^^}-${project}-${distribution}-${release}"
            fi
            logfile="${OUTPUT_DIRECTORY}/${name}/build.log"
            if [ ! -e "${OUTPUT_DIRECTORY}/${name}/successfully-built.txt" ] ; then
               if [ "${isFirst}" -eq 0 ] ; then
                  if [ "${delay}" -gt 0 ] ; then
                     echo -e "\x1b[37mWaiting for ${delay} s ...\x1b[0m"
                     sleep "${delay}"
                  fi
               fi
               isFirst=0

               startTime="$(date +"%Y-%m-%d %H:%M:%S")"
               echo -e "\x1b[33m${startTime}: Starting to build ${name}, logfile is ${logfile} ...\x1b[0m"
               mkdir -p "${OUTPUT_DIRECTORY}/${name}"
               (
                  # shellcheck disable=SC2086
                  if ./make-vm -H "${HYPERVISOR}" \
                        --project "${project}" --distribution "${distribution}" --release "${release}" \
                        --hostname "${HOSTNAME}" \
                        --username "${USER_NAME}" --realname "${USER_REALNAME}" --password "${USER_PASSWORD}" \
                        --architecture "${architecture}" \
                        --chipset "${CHIPSET}" \
                        --firmware "${FIRMWARE}" \
                        --cores "${CORES}" --memory "${MEMORY}" --balloon "${BALLOON}" \
                        --root "${DISK_ROOT}" --home "${DISK_HOME}" --swap "${DISK_SWAP}" \
                        --video "${VIDEO}" \
                        --bootsplash "${BOOTSPLASH}" \
                        --background-sddm "${BACKGROUND_SDDM}" \
                        --background-lockscreen "${BACKGROUND_LOCKSCREEN}" \
                        --background-desktop "${BACKGROUND_DESKTOP}" \
                        --cache-directory "${CACHE_DIRECTORY}" \
                        --output-directory "${OUTPUT_DIRECTORY}" \
                        ${OPTIONS}  >"${logfile}" 2>&1 ; then
                     result="OK"
                     resultColor="32"
                  else
                     result="FAILED!"
                     resultColor="37;41;97"
                  fi
                  finishTime="$(date +"%Y-%m-%d %H:%M:%S")"
                  echo -e "\x1b[${resultColor}m${finishTime}: Finished to build ${name} - ${result} -> ${logfile}\x1b[0m"
               ) &
            else
               echo -e "\x1b[34m${name} is already there -> ${logfile}\x1b[0m"
            fi
         done
      done
   done

   # ====== Wait for completion of all parallel builds ======================
   wait
   reset -I
}
