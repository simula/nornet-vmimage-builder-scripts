#!/usr/bin/env bash
#
# Autoinstall Scripts
# Copyright (C) 2017-2025 by Thomas Dreibholz
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Contact: thomas.dreibholz@gmail.com

# Bash options:
set -eux


# ###########################################################################
# The "Development" installation is based on the "Basic" installation.
#
# It must contain the following packages:
# * [BC](https://pubs.opengroup.org/onlinepubs/9699919799/utilities/bc.html) (arbitrary precision calculator language)
# * [CLang](https://clang.llvm.org/) (CLang C and C++ compilers)
# * [CMake](https://cmake.org/) (build tool)
# * [DejaVu Fonts](https://dejavu-fonts.github.io/) ([DejaVu fonts)
# * [ExifTool](https://exiftool.org/) (EXIF metadata editing tool for images)
# * [Docker](https://www.docker.com/) (Docker container management; on Linux systems only!)
# * [GhostScript](https://www.ghostscript.com/) (PostScript interpreter and fonts)
# * [GNU Autotools (Autoconf/Automake/Libtool)](https://en.wikipedia.org/wiki/GNU_Autotools) (basic build tools)
# * [GNU Bison](https://www.gnu.org/software/bison/) (parser generator)
# * [Flex](https://github.com/westes/flex) (lexical analyser generator)
# * [GNU GCC/G++, GNU Make, GNU Debugger](https://gcc.gnu.org/) (compilers, debugger and make tool)
# * [GraphicsMagick](http://www.graphicsmagick.org/) (image conversion)
# * [Noto Fonts](https://fonts.google.com/noto) (Noto fonts, complete UTF-8 character range)
# * [PkgConfig](https://www.freedesktop.org/wiki/Software/pkg-config/) (metainformation about installed libraries)
# * [Open Sans Fonts](https://fonts.google.com/specimen/Open+Sans) (Open Sans fonts)
# * [Python](https://www.python.org/) (Python 3 interpreter, tools and PIP package management)
# * [ShellCheck](https://www.shellcheck.net/) (checker tool for shell scripts)
# * [Valgrind](https://valgrind.org/) (debugging tool)
# * [YamlLint](https://github.com/adrienverge/yamllint) (checker tool for YAML)
# * [RepRepro](https://wiki.debian.org/DebianRepository/SetupWithReprepro) (DEB repository build tool; on Linux systems only!)
# * [PBuilder](https://pbuilder-team.pages.debian.net/pbuilder/) (DEB build tool; on Linux systems only!)
#
# It must contain the following libraries and development files:
# * [BOOST C++ Libraries](https://www.boost.org/) (portable C++ libraries)
# * SCTP development files (if needed)
#
# Further properties:
# * Password-less sudo calls. ⚠WARNING: Development settings are intended for developers only!
# * Wireshark as regular user is allowed. ⚠WARNING: Development settings are intended for developers only!
# * Source packages enabled from package manager (if available)
# ###########################################################################


# ====== Check/set environment variables ====================================
if [ ! -v USER_NAME ] || [ "${USER_NAME}" == "" ] ; then
   echo >&2 "Usage: env USER_NAME=<user> $0"
   echo >&2 "Example: sudo env USER_NAME=nornetpp $0"
   exit 1
fi
if [ ! -e /etc/os-release ] ; then
   echo >&2 "ERROR: /etc/os-release does not exist!"
   exit 1
fi
. /etc/os-release


# ====== Package installation ===============================================

# ------ Ubuntu/Debian ------------------------------------------------------
if [ "${ID}" == "ubuntu" ] || [ "${ID}" == "debian" ] ; then

   # Programs:
   packages="
      autoconf
      automake
      bc
      bison
      build-essential
      clang
      cmake
      debhelper
      devscripts
      dpkg-dev
      flex
      fonts-dejavu
      fonts-noto
      fonts-open-sans
      g++
      gcc
      gdb
      ghostscript
      graphicsmagick
      gsfonts
      libimage-exiftool-perl
      manpages-dev
      pbuilder
      pdf2svg
      pkg-config
      python3-distro
      python3-netifaces
      python3-pip
      r-base
      reprepro
      shellcheck
      valgrind
   "

   # Development files:
   packages="${packages}
      libboost-all-dev
      libbz2-dev
      libc-ares-dev
      libcurl4-openssl-dev
      libgeoip-dev
      liblzma-dev
      libpqxx-dev
      libsctp-dev
      libssl-dev
      qtbase5-dev
      qtbase5-dev-tools
      qtchooser
      qttools5-dev
      zlib1g-dev
   "
   if [ "${ID}" == "ubuntu" ] && [[ "${VERSION_ID}" =~ ^1[2345]\.[01][04]$ ]] ; then
      # Ubuntu 12.04, 14.04:
      packages="${packages} libtool libmariadbclient-dev"
   elif [ "${ID}" == "ubuntu" ] && [[ "${VERSION_ID}" =~ ^1[67]\.[01][04]$ ]] ; then
      # Ubuntu 16.04:
      packages="${packages} extra-cmake-modules libmongoc-dev python3-venv yamllint libtool-bin libmariadb-client-lgpl-dev"
   else
      # Newer Ubuntu and Debian systems:
      packages="${packages} extra-cmake-modules libmongoc-dev python3-venv yamllint libtool-bin libmariadb-dev"
   fi

   # shellcheck disable=SC2086
   env DEBIAN_FRONTEND=noninteractive /usr/bin/apt-get install -y -m --no-install-recommends ${packages}


# ------ Fedora -------------------------------------------------------------
elif [ "${ID}" == "fedora" ] ; then

   # Programs:
   packages="
      autoconf
      automake
      bc
      bison
      clang
      cmake
      dejavu-fonts-all
      flex
      g++
      gcc
      gdb
      ghostscript
      google-noto-fonts-all
      GraphicsMagick
      libtool
      mock
      open-sans-fonts
      pbuilder
      perl-Image-ExifTool
      pdf2svg
      pkg-config
      python3
      python3-netifaces
      python3-pip
      python3-setuptools
      R-base
      reprepro
      rpm-build
      shellcheck
      urw-base35-fonts
      valgrind
      yamllint
   "

   # Development files:
   packages="${packages}
      boost-devel
      bzip2-devel
      c-ares-devel
      GeoIP-devel
      libbson-devel
      libcurl-devel
      libpqxx-devel
      lksctp-tools-devel
      mariadb-connector-c-devel
      mongo-c-driver-devel
      openssl-devel
      qt5-qtbase-devel
      qt5-qttools-devel
      qtchooser
      rsplib-libcpprspserver-devel
      rsplib-librsplib-devel
      xz-devel
      zlib-devel
   "

   # shellcheck disable=SC2086
   /usr/bin/dnf install --setopt=install_weak_deps=False -y ${packages}

   # Add user to "mock" group:
   usermod -a -G mock "${USER_NAME}"


# ------ FreeBSD ------------------------------------------------------------
elif [ "${ID}" == "freebsd" ] ; then

   # Programs:
   packages="
      autoconf
      automake
      bison
      cmake
      dejavu
      flex
      gcc
      gdb
      ghostscript10
      GraphicsMagick
      hs-ShellCheck
      libtool
      noto
      open-sans-20180831
      p5-Image-ExifTool
      p5-PkgConfig-LibPkgConf
      pdf2svg
      py311-distro
      py311-netifaces
      py311-yamllint
      python
      R
      urw-base35-fonts
      valgrind
   "

   # Development files:
   packages="${packages}
      boost-all
      mongo-c-driver
      postgresql-libpqxx
      qt5
   "

   # shellcheck disable=SC2086
   /usr/sbin/pkg install -y ${packages}

   # Fetch and check out the FreeBSD Sources:
   . /etc/os-release
   branch="main"
   if [[ "${VERSION}" =~ -RELEASE$ ]] ; then
      branch="releng/${VERSION_ID}"
      echo "Release branch: ${branch}"
   elif [[ "${VERSION}" =~ -STABLE$ ]] ; then
      branch="stable/${VERSION_ID//.[0-9]*/}"
      echo "Stable branch: ${branch}"
   fi
   cd /usr/src
   git fetch --all
   git checkout "${branch}"
   git pull

   # Fetch and check out the FreeBSD Ports Collection:
   cd /usr/ports
   git fetch --all
   git checkout main
   git pull


# ------ Unknown ------------------------------------------------------------
else

   echo >&2 "ERROR: Unknown ID ${ID} in /etc/os-release. The installation script may need an update for supporting this system!"
   exit 1

fi


# ====== Verify command availability ========================================

programs="autoconf automake bc bison clang clang++ cmake exiftool flex g++ gcc gdb gm gs libtool make pkg-config shellcheck valgrind"
if [ "${ID}" == "ubuntu" ] && [[ "${VERSION_ID}" =~ ^1[2345]\.[01][04]$ ]] ; then
   true
else
   programs="${programs} yamllint"
fi

echo "Verifying command availability:"
errors=0
for command in ${programs} ; do
   echo -n "${command}: "
   if which "${command}" >/dev/null ; then
      echo "OK"
   else
      echo "FAILED!"
      errors=$((errors+1))
   fi
done
if [ "$(uname)" == "Linux" ] ; then
   for command in reprepro pbuilder ; do
      echo -n "${command}: "
      if which ${command} >/dev/null ; then
         echo "OK"
      else
         echo "FAILED!"
         errors=$((errors+1))
      fi
   done
fi
if [ ${errors} -gt 0 ] ; then
   echo >&2 "ERROR: ${errors} packages are missing!"
   exit 1
fi
