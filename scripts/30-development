#!/usr/bin/env bash
#
# Autoinstall Scripts
# Copyright (C) 2017-2024 by Thomas Dreibholz
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Contact: dreibh@simula.no

# Bash options:
set -e


# ###########################################################################
# The "Development" installation is based on the "Basic" installation.
#
# It must contain the following packages:
# * BC (arbitrary precision calculator language)
# * CLang (CLang C and C++ compilers)
# * CMake (build tool)
# * ExifTool (EXIF metadata editing tool for images)
# * GhostScript (PostScript interpreter and fonts)
# * GNU Autoconf/Automake/Libtool (basic build tools)
# * GNU Bison (parser generator)
# * GNU Flex (lexical analyser generator)
# * GNU GCC/G++, GNU Make, GNU Debugger (compilers, debugger and make tool)
# * GNU R (statistical computing language)
# * GraphicsMagick (image conversion)
# * LibTool (build tool for libraries)
# * PkgConfig (metainformation about installed libraries)
# * Python (Python 3 interpreter, tools and PIP package management)
# * ShellCheck (checker tool for shell scripts)
# * Valgrind (debugging tool)
# * YamlLint (checker tool for YAML)
# * RepRepro (DEB repository build tool; on Linux systems only!)
# * PBuilder (DEB build tool; on Linux systems only!)
#
# It must contain the following libraries and development files:
# * BOOST (portable C++ libraries)
# * SCTP
#
# Further properties:
# * Password-less sudo calls
#   WARNING: Development settings are intended for developers only!
# * Source packages enabled from package manager (if available)
# ###########################################################################


# ====== Package installation ===============================================

# ------ Ubuntu/Debian ------------------------------------------------------
if [ -e /usr/bin/apt-get ] ; then

   # Programs:
   packages="
      autoconf
      automake
      bc
      bison
      build-essential
      clang
      cmake
      extra-cmake-modules
      debhelper
      devscripts
      flex
      fonts-dejavu
      fonts-noto-cjk
      fonts-noto-hinted
      g++
      gcc
      gdb
      ghostscript
      graphicsmagick
      gsfonts
      libimage-exiftool-perl
      libtool-bin
      manpages-dev
      pbuilder
      pkg-config
      python3-all
      python3-pip
      r-base
      reprepro
      shellcheck
      valgrind
      yamllint
   "

   # Development files:
   packages="${packages}
      libboost-all-dev
      libbz2-dev
      libc-ares-dev
      libcpprspserver-dev
      libcurl4-openssl-dev
      libgeoip-dev
      liblzma-dev
      libmongoc-dev
      libmysqlcppconn-dev
      libpqxx-dev
      librsplib-dev
      libsctp-dev
      libssl-dev
      qtbase5-dev
      qtbase5-dev-tools
      qtchooser
      qttools5-dev
      zlib1g-dev
   "

   # shellcheck disable=SC2086
   env DEBIAN_FRONTEND=noninteractive /usr/bin/apt-get install -y --no-install-recommends ${packages}

   for list in /etc/apt/sources.list $(find /etc/apt/sources.list.d -name "*.list"); do
      grep "^deb \(.*\)$" "${list}" | \
         sed -e "s/deb[ \t]*//g" | \
         xargs -r -Iยง echo "s@^#[ \t]*deb-src \(ยง\)[ \t]*\$@deb-src \\1@g" >"${list}.sed"
      sed -f "${list}".sed <"${list}" >"${list}.new"
      diff "${list}" "${list}.new" || true
      mv "${list}.new" "${list}"
      rm -f "${list}.sed"
   done
   find /etc/apt/sources.list.d -name "*.sources" -exec sed -e 's/^Types: deb[ \t]*$/Types: deb deb-src/g' -i {} \;


# ------ Fedora -------------------------------------------------------------
elif [ -e /usr/bin/dnf ] ; then

   # Programs:
   packages="
      autoconf
      automake
      bc
      bison
      clang
      cmake
      flex
      g++
      gcc
      gdb
      ghostscript
      google-noto-cjk-fonts
      google-noto-sans-fonts
      google-noto-serif-fonts
      GraphicsMagick
      libtool
      mock
      pbuilder
      perl-Image-ExifTool
      pkg-config
      python3
      python3-pip
      python3-setuptools
      R-base
      reprepro
      shellcheck
      urw-base35-fonts
      valgrind
      yamllint
   "

   # Development files:
   packages="${packages}
      boost-devel
      bzip2-devel
      c-ares-devel
      GeoIP-devel
      libbson-devel
      libcurl-devel
      libpqxx-devel
      lksctp-tools-devel
      mongo-c-driver-devel
      openssl-devel
      qt5-qtbase-devel
      qt5-qttools-devel
      qtchooser
      rsplib-libcpprspserver-devel
      rsplib-librsplib-devel
      xz-devel
      zlib-devel
   "

   # shellcheck disable=SC2086
   /usr/bin/dnf install -y ${packages}


# ------ FreeBSD ------------------------------------------------------------
elif [ -e /usr/sbin/pkg ] ; then

   # Programs:
   packages="
      autoconf
      automake
      bison
      cmake
      flex
      gcc
      gdb
      ghostscript10
      GraphicsMagick
      hs-ShellCheck
      libtool
      noto
      p5-Image-ExifTool
      p5-PkgConfig-LibPkgConf
      py39-yamllint
      python
      R
      urw-base35-fonts
      valgrind
   "

   # Development files:
   packages="${packages}
      boost-all
      mongo-c-driver
      mysql-connector-c++
      postgresql-libpqxx
      qt5
   "

   # shellcheck disable=SC2086
   /usr/sbin/pkg install -y ${packages}

   # Fetch and check out the FreeBSD Sources:
   . /etc/os-release
   branch="main"
   if [[ "${VERSION}" =~ -RELEASE$ ]] ; then
      branch="releng/${VERSION_ID}"
      echo "Release branch: ${branch}"
   elif [[ "${VERSION}" =~ -STABLE$ ]] ; then
      branch="stable/${VERSION_ID//.[0-9]*/}"
      echo "Stable branch: ${branch}"
   fi
   cd /usr/src
   git fetch --all
   git checkout "${branch}"
   git pull

   # Fetch and check out the FreeBSD Ports Collection:
   cd /usr/ports
   git fetch --all
   git checkout main
   git pull

fi


# ====== Verify command availability ========================================
echo "Verifying command availability:"
errors=0
for command in autoconf automake bc bison clang clang++ cmake exiftool flex g++ gcc gdb gm gs libtool make pkg-config shellcheck valgrind yamllint ; do
   echo -n "${command}: "
   if which ${command} >/dev/null ; then
      echo "OK"
   else
      echo "FAILED!"
      errors=$((errors+1))
   fi
done
if [ "$(uname)" == "Linux" ] ; then
   for command in reprepro pbuilder ; do
      echo -n "${command}: "
      if which ${command} >/dev/null ; then
         echo "OK"
      else
         echo "FAILED!"
         errors=$((errors+1))
      fi
   done
fi
if [ ${errors} -gt 0 ] ; then
   echo >&2 "ERROR: ${errors} packages are missing!"
   exit 1
fi
