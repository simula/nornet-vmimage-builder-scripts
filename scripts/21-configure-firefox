#!/usr/bin/env bash
#
# Autoinstall Scripts
# Copyright (C) 2017-2024 by Thomas Dreibholz
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Contact: dreibh@simula.no

# Bash options:
set -e


# Documentation:
# * https://developer.mozilla.org/en-US/docs/Mozilla/Preferences/A_brief_guide_to_Mozilla_preferences
# * https://github.com/NicolasBernaerts/ubuntu-scripts/blob/master/mozilla/mozilla-extension-manager
# * https://superuser.com/questions/373276/how-to-enable-extension-when-running-firefox-for-the-first-time
# * https://gist.github.com/0XDE57/fbd302cef7693e62c769
# * https://support.mozilla.org/en-US/questions/1197144
# * https://github.com/K3V1991/Disable-Firefox-Telemetry-and-Data-Collection


HOMEPAGE="https://www.nntb.no/~dreibh"


# ====== Ensure that script is ran by user account to provision =============
if [ "$(id -u)" -eq 0 ] ; then
   # Running by configuring sudo root. Run script again, but as user!
   echo "Running as ROOT! SUDO_USER=${SUDO_USER}"
   if [ "${SUDO_USER}" != "root" ] ; then
      # shellcheck disable=SC2068
      sudo -u "${SUDO_USER}" "$0" $@ && exit 0
      exit 1
   else
      # Prevent recursive invocation as "root" user:
      echo >&2 "ERROR: Run this script either as user or with sudo."
      exit 1
   fi
else
   # Echo running as user
   echo "Running as ${USER}! SUDO_USER=${SUDO_USER}"
fi

if [ -x /usr/bin/lsb_release ] ; then
   release="$(/usr/bin/lsb_release -cs)"
   if [ "${release}" == "precise" ] || [ "${release}" == "trusty" ] || [ "${release}" == "xenial" ]; then
      echo >&2 "Not trying to configure Firefox, since the Ubuntu version is out of date!"
      exit 0
   fi
fi


# ###### Get UID from XPI extension file ####################################
# From: https://github.com/NicolasBernaerts/ubuntu-scripts/blob/master/mozilla/mozilla-extension-manager
function get-xpi-uid ()
{
   local LOC_XPI="$1"
   local LOC_UID=""

   # get extension UID from install.rdf in original format (<em:id>extension-uid</em:id>)
   LOC_UID=$(unzip -qq -p "${LOC_XPI}" install.rdf 2>/dev/null | grep "<em:id>" | head -n 1 | cut -d'>' -f2 | cut -d'<' -f1)

   # if extension UID not found, get it from install.rdf in new format (<RDF:Description ... em:id="{extension-uid}" ...)
   [ "${LOC_UID}" = "" ] && LOC_UID=$(unzip -qq -p "${LOC_XPI}" install.rdf 2>/dev/null | grep "em:id=" | head -n 1 | sed "s/^.*em:id=\"\([^\"]*\).*$/\1/")

   # if extension UID not found, get it from key "id" in manifest.json ("id": "extension-uid")
   [ "${LOC_UID}" = "" ] && LOC_UID=$(unzip -qq -p "${LOC_XPI}" manifest.json 2>/dev/null | grep "\"id\"" | head -n 1 | cut -d'"' -f4)

   # if extension UID not found, get it from key "name" in manifest.json ("name": "extension name")
   [ "${LOC_UID}" = "" ] && LOC_UID=$(unzip -qq -p "${LOC_XPI}" manifest.json 2>/dev/null | grep "\"name\"" | head -n 1 | cut -d'"' -f4 | tr ' ' '-')

   # display extension UID
   echo "${LOC_UID}"
}


# ###### Get name from XPI extension file ####################################
# From: https://github.com/NicolasBernaerts/ubuntu-scripts/blob/master/mozilla/mozilla-extension-manager
function get-xpi-name ()
{
   local LOC_XPI="$1"
   local LOC_NAME=""

   # get extension name from install.rdf in original format (<em:id>extension-uid</em:id>)
   LOC_NAME=$(unzip -qq -p "${LOC_XPI}" install.rdf 2>/dev/null | grep "<em:name>" | head -n 1 | cut -d'>' -f2 | cut -d'<' -f1)

   # if extension name not found, get it from install.rdf in new format (<RDF:Description ... em:name="extension-name" ...)
   [ "${LOC_NAME}" = "" ] && LOC_NAME=$(unzip -qq -p "${LOC_XPI}" install.rdf 2>/dev/null | grep "em:name=" | head -n 1 | sed "s/^.*em:name//" | cut -d'"' -f2)

   # if extension name not found, get it from key "name" in manifest.json ("name": "extension name")
   [ "${LOC_NAME}" = "" ] && LOC_NAME=$(unzip -qq -p "${LOC_XPI}" manifest.json 2>/dev/null | grep "\"name\"" | head -n 1 | cut -d'"' -f4)

   # display extension name
   echo "${LOC_NAME}"
}


# ###### Install XPI ########################################################
function install-xpi ()
{
   local number="$1"
   local profilePaths="$2"

   URL1="https://addons.mozilla.org/firefox/downloads/latest/${number}/addon-${number}-latest.xpi"
   URL2="https://addons.mozilla.org/firefox/downloads/file/${number}/"

   echo "Processing ${URL1} ..."

   MY_XPI=$(mktemp)
   wget --quiet -O "${MY_XPI}" "${URL1}" || wget --quiet -O "${MY_XPI}" "${URL2}"

   MY_UID=$(get-xpi-uid "${MY_XPI}")
   MY_NAME=$(get-xpi-name "${MY_XPI}")
   echo " * Name: ${MY_NAME}"
   echo " * UID:  ${MY_UID}"

   for profilePath in ${profilePaths} ; do
      cp "${MY_XPI}" "${profilePath}/extensions/${MY_UID}.xpi"
   done
}


# ###### Firefox run in headless mode, to initialise the profile ------------
function run-firefox-headless ()
{
   # ------ Initialise profile by a short Firefox run in headless mode ------
   echo "Starting Firefox in headless mode ..."
   du -schk "${profilePath}"

   firefox -P default-release --headless --no-remote &
   pid=$!
   echo "Waiting a moment to let Firefox initialise the profile (PID ${pid}) ..."
   sleep 45
   echo "Stopping Firefox ..."
   kill -s TERM ${pid}   # Executable is /usr/lib*/firefox/firefox

   echo "Waiting for Firefox to finish ..."
   wait
   echo "Done!"
}


# ###### Main program #######################################################

# ====== Create initial profile, if none is existing ========================
if [ ! -x /snap/bin/firefox ] ; then
   # Firefox as regular package
   FIREFOX_CONFIGDIR="${HOME}/.mozilla/firefox"
else
   # Firefox as Snap
   FIREFOX_CONFIGDIR="${HOME}/snap/firefox/common/.mozilla/firefox"
fi
echo "Firefox configuration directory is ${FIREFOX_CONFIGDIR}"

if [ ! -d "${FIREFOX_CONFIGDIR}" ] ; then
   echo "###### Creating new profile setup! ######"
   mkdir -p "${FIREFOX_CONFIGDIR}"
   pushd "${FIREFOX_CONFIGDIR}" >/dev/null

   profileName="profile-$(dd if=/dev/urandom bs=16 count=1 status=none|hexdump -v -e '"%02X"')"
   mkdir "${profileName}"
   mkdir "${profileName}/extensions"
   cat >profiles.ini <<EOF
[Profile0]
Name=default-release
IsRelative=1
Path=${profileName}
Default=1

[General]
StartWithLastProfile=1
Version=2
EOF

   popd >/dev/null
fi


# ====== Install extensions =================================================
PROFILE_PATHS=""
if [ -e "${FIREFOX_CONFIGDIR}/profiles.ini" ] ; then
   profilePaths=$(grep "^Path=" "${FIREFOX_CONFIGDIR}/profiles.ini" | sed -e "s/^Path=//g")
   for profilePath in ${profilePaths} ; do
      if [ -d "${FIREFOX_CONFIGDIR}/${profilePath}/extensions/" ] ; then
         PROFILE_PATHS="${PROFILE_PATHS} ${FIREFOX_CONFIGDIR}/${profilePath}"
      fi
   done
fi
if [ "${PROFILE_PATHS}" == "" ] ; then
   echo 2>&1 "ERROR: Unable to detect Firefox profile paths!"
   exit 1
fi


EXTENSIONS=""
EXTENSIONS="${EXTENSIONS=} 607454"   # uBlock Origin
EXTENSIONS="${EXTENSIONS=} 722"      # NoScript
EXTENSIONS="${EXTENSIONS=} 5791"     # FlagFox
EXTENSIONS="${EXTENSIONS=} 6822"     # Binnen-I be gone
EXTENSIONS="${EXTENSIONS=} 4069651"  # I still don't care about cookies
EXTENSIONS="${EXTENSIONS=} 4040738"  # Cookie AutoDelete
EXTENSIONS="${EXTENSIONS=} 3859385"  # KDE Plasma Integration

for extension in ${EXTENSIONS} ; do
   install-xpi "${extension}" "${PROFILE_PATHS}"
done


# ====== Enhance settings ===================================================
for profilePath in ${PROFILE_PATHS} ; do

   xpis=$(find "${profilePath}/extensions" -mindepth 1 -maxdepth 1 -name "*.xpi")
   uids=""
   for xpi in ${xpis}; do
      uid=$(get-xpi-uid "${xpi}")
      uids="${uids} ${uid}"
   done

   # ======= Make settings in user.js =======================================
   # Firefox runs user.js on startup. These have to be applied only on the
   # first run, so the file will get removed later in this script!
   cat >"${profilePath}/user.js" <<EOF
user_pref("accessibility.force_disabled", 1);
user_pref("browser.contentblocking.category", "custom");
user_pref("browser.privatebrowsing.autostart", false);

// ------ Privacy settings --------------------------------------------------
// Further documentation:
// https://gist.github.com/0XDE57/fbd302cef7693e62c769
user_pref("network.cookie.cookieBehavior", 1);
user_pref("network.cookie.lifetimePolicy", 2);

user_pref("network.http.sendRefererHeader", 0);
user_pref("network.http.sendSecureXSiteReferrer", false);
user_pref("network.http.referer.spoofSource", true);
user_pref("network.predictor.enabled", false);

user_pref("privacy.donottrackheader.enabled", true);
user_pref("privacy.history.custom", true);
user_pref("browser.formfill.enable", false);
user_pref("privacy.trackingprotection.enabled", true);
user_pref("privacy.trackingprotection.socialtracking.enabled", true);

user_pref("browser.send_pings", false);
user_pref("browser.send_pings.require_same_host", true);

user_pref("browser.safebrowsing.enabled", false);
user_pref("browser.safebrowsing.malware.enabled", false);
user_pref("browser.safebrowsing.phishing.enabled", false);
user_pref("browser.safebrowsing.downloads.enabled", false);
user_pref("browser.safebrowsing.blockedURIs.enabled", false);
user_pref("browser.safebrowsing.downloads.remote.enabled", false);

user_pref("browser.safebrowsing.provider.google4.dataSharing.enabled", false);
user_pref("browser.safebrowsing.provider.google4.advisoryURL", "");
user_pref("browser.safebrowsing.provider.google4.dataSharingURL", "");
user_pref("browser.safebrowsing.provider.google4.gethashURL", "");
user_pref("browser.safebrowsing.provider.google4.reportMalwareMistakeURL", "");
user_pref("browser.safebrowsing.provider.google4.reportPhishMistakeURL", "");
user_pref("browser.safebrowsing.provider.google4.reportURL", "");
user_pref("browser.safebrowsing.provider.google4.updateURL", "");
user_pref("browser.safebrowsing.provider.google.advisoryURL", "");
user_pref("browser.safebrowsing.provider.google.dataSharingURL", "");
user_pref("browser.safebrowsing.provider.google.gethashURL", "");
user_pref("browser.safebrowsing.provider.google.reportMalwareMistakeURL", "");
user_pref("browser.safebrowsing.provider.google.reportPhishMistakeURL", "");
user_pref("browser.safebrowsing.provider.google.reportURL", "");
user_pref("browser.safebrowsing.provider.google.updateURL", "");

user_pref("services.sync.prefs.sync.browser.safebrowsing.downloads.enabled", false);
user_pref("services.sync.prefs.sync.browser.safebrowsing.malware.enabled", false);
user_pref("services.sync.prefs.sync.browser.safebrowsing.downloads.enabled", false);

user_pref("dom.battery.enabled", false);

user_pref("browser.cache.disk.enable", false);
user_pref("browser.cache.disk_cache_ssl", false);
user_pref("browser.cache.offline.enable", false);

user_pref("loop.enabled", false);
user_pref("extensions.pocket.enabled", false);

user_pref("browser.selfsupport.url", "");
user_pref("browser.aboutHomeSnippets.updateUrL", "");
user_pref("browser.startup.homepage_override.mstone", "");
user_pref("browser.startup.homepage_override.buildID", "");
user_pref("startup.homepage_welcome_url", "");
user_pref("startup.homepage_welcome_url.additional", "");
user_pref("startup.homepage_override_url", "");

// ------ Turn off all telemetry --------------------------------------------
// Further documentation:
// * https://support.mozilla.org/en-US/questions/1197144
// * https://github.com/K3V1991/Disable-Firefox-Telemetry-and-Data-Collection
user_pref("browser.newtabpage.activity-stream.feeds.telemetry", false);
user_pref("browser.newtabpage.activity-stream.telemetry", false);
user_pref("browser.ping-centre.telemetry", false);
user_pref("datareporting.healthreport.service.enabled", false);
user_pref("datareporting.healthreport.uploadEnabled", false);
user_pref("datareporting.policy.dataSubmissionEnabled", false);
user_pref("datareporting.sessions.current.clean", true);
user_pref("devtools.onboarding.telemetry.logged", false);
user_pref("toolkit.telemetry.archive.enabled", false);
user_pref("toolkit.telemetry.bhrPing.enabled", false);
user_pref("toolkit.telemetry.cachedClientID", "");
user_pref("toolkit.telemetry.enabled", false);
user_pref("toolkit.telemetry.firstShutdownPing.enabled", false);
user_pref("toolkit.telemetry.hybridContent.enabled", false);
user_pref("toolkit.telemetry.newProfilePing.enabled", false);
user_pref("toolkit.telemetry.pioneer-new-studies-available", false);
user_pref("toolkit.telemetry.prompted", 2);
user_pref("toolkit.telemetry.rejected", true);
user_pref("toolkit.telemetry.reportingpolicy.firstRun", false);
user_pref("toolkit.telemetry.server", "");
user_pref("toolkit.telemetry.shutdownPingSender.enabled", false);
user_pref("toolkit.telemetry.unified", false);
user_pref("toolkit.telemetry.unifiedIsOptIn", false);
user_pref("toolkit.telemetry.updatePing.enabled", false);

// ------ Other "phone home" stuff ------------------------------------------
user_pref("app.shield.optoutstudies.enabled", false);
user_pref("app.normandy.first_run", false);

// ------ Set own homepage --------------------------------------------------
user_pref("browser.startup.homepage", "${HOMEPAGE}");
EOF

   # ======= Make settings in xulstore.json =================================
   # The following setting makes the menu bar always visible:
   cat >"${profilePath}/xulstore.json" <<EOF
{
  "chrome://browser/content/browser.xhtml": {
    "toolbar-menubar": {
      "autohide": "false"
    }
  }
}
EOF

done


# ====== Run Firefox to initialise ==========================================
for profilePath in ${PROFILE_PATHS} ; do

   # ------ Run Firefox in headless mode, to initialise the profile ---------
   run-firefox-headless

   du -schk "${profilePath}"
   # The user.js has run (via run-firefox-headless) -> move it away, to avoid
   # reapplying everything each time Firefox gets started:
   mv "${profilePath}/user.js"  "${profilePath}/user.js-configure-firefox"
   # Make a backup of prefs.js:
   cp "${profilePath}/prefs.js" "${profilePath}/prefs.js-configure-firefox"

   # ------ Activate the newly installed extensions -------------------------
   echo "Updating ${profilePath}/extensions.json ..."
   jq . <"${profilePath}/extensions.json" >"${profilePath}/extensions.json.old"
   cp "${profilePath}/extensions.json" "${profilePath}/extensions.json.work"
   for uid in ${uids} ; do
      echo "Activating extension ${uid} ..."
      # shellcheck disable=SC2002
      cat "${profilePath}/extensions.json.work" | jq \
         "(.addons[] | select(.id == \"${uid}\") | .active) |= true" | \
         jq \
            "(.addons[] | select(.id == \"${uid}\") | .userDisabled) |= false" \
            >"${profilePath}/extensions.json.new"
      mv "${profilePath}/extensions.json.new" "${profilePath}/extensions.json.work"
   done
   diff "${profilePath}/extensions.json.old" "${profilePath}/extensions.json.work" || true
   mv "${profilePath}/extensions.json.work" "${profilePath}/extensions.json"
   echo "Updated ${profilePath}/extensions.json"

   # user.js now has to tell Firefox to perform the initialisation of the add-ons:
   cat >"${profilePath}/user.js" <<EOF
// Install extensions on the next run of Firefox:
user_pref("extensions.pendingOperations", true);
EOF

   # ------ Run Firefox in headless mode again, to initialise the add-ons ---
   run-firefox-headless

   # Remove user.js
   rm "${profilePath}/user.js"

done

echo "Done!"
