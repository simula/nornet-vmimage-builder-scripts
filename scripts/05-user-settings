#!/usr/bin/env bash
#
# Autoinstall Scripts
# Copyright (C) 2017-2025 by Thomas Dreibholz
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Contact: thomas.dreibholz@gmail.com

# Bash options:
set -exu


# ====== Check/set environment variables ====================================
if [ ! -v USER_NAME ]     || [ "${USER_NAME}"     == "" ] || \
   [ ! -v USER_REALNAME ] || [ "${USER_REALNAME}" == "" ] ; then
   echo >&2 "Usage: env USER_NAME=<user> USER_REALNAME=\"<full user name>\" $0"
   echo >&2 "Example: sudo env USER_NAME=nornetpp USER_REALNAME=\"NorNet Praesum Presum\" $0"
   exit 1
fi
if [ ! -e /etc/os-release ] ; then
   echo >&2 "ERROR: /etc/os-release does not exist!"
   exit 1
fi
. /etc/os-release
UNAME="$(uname)"


# ====== Initial .bashrc ====================================================
if [ "${ID}" == "freebsd" ] || [ "${ID}" == "fedora" ] ; then
   if [ -e /tmp/configuration-files/bashrc ] ; then
      cp /tmp/configuration-files/bashrc "/home/${USER_NAME}/.bashrc"
      if [ "${ID}" == "freebsd" ]  ; then
         cp /tmp/configuration-files/bashrc /usr/share/skel/.bashrc
      elif [ "${ID}" == "fedora" ] ; then
         cp /tmp/configuration-files/bashrc /etc/skel/.bashrc
      fi
   fi
fi
if [ "${ID}" == "freebsd" ] ; then
   if [ ! -e "/home/${USER_NAME}/.bash_profile" ] ; then
      cat >"/home/${USER_NAME}/.bash_profile" <<EOF
test -f ~/.bashrc && source ~/.bashrc
EOF
   fi
fi


# ====== Make some additions to .bashrc =====================================
cat >>"/home/${USER_NAME}/.bashrc" <<EOF


# ---------------------------------------------------------------------------

alias runws="sudo echo Starting Wireshark && ( sudo wireshark & )"

ulimit -c unlimited

export EDITOR=joe
export CVSEDITOR=\${EDITOR}
export SVN_EDITOR=\${EDITOR}
export XZ_DEFAULTS="--threads=0"

cores=\`getconf _NPROCESSORS_ONLN 2>/dev/null || true\`
if [ \$cores -gt 1 ] ; then
   export MAKEFLAGS=-j\${cores}
fi
EOF
sudo chown "${USER_NAME}":"${USER_NAME}" "/home/${USER_NAME}/.bashrc"


# ====== Make some directories ==============================================
sudo -u "${USER_NAME}" mkdir -p "/home/${USER_NAME}/src"
if [ -x /usr/bin/chattr ] ; then
   sudo -u "${USER_NAME}" /usr/bin/chattr +c "/home/${USER_NAME}/src" || true
fi
sudo -u "${USER_NAME}" mkdir -p "/home/${USER_NAME}/tmp"

sudo -u "${USER_NAME}" mkdir -p "/home/${USER_NAME}/.ssh"
sudo -u "${USER_NAME}" chmod 700 "/home/${USER_NAME}/.ssh"
sudo -u "${USER_NAME}" touch "/home/${USER_NAME}/.ssh/authorized_keys"
sudo -u "${USER_NAME}" chmod 600 "/home/${USER_NAME}/.ssh/authorized_keys"

sudo -u "${USER_NAME}" mkdir -p "/home/${USER_NAME}/.cache"
sudo -u "${USER_NAME}" chmod 700 "/home/${USER_NAME}/.cache"


# ====== Git configuration file =============================================
(
cat <<EOF
[user]
        name = ${USER_REALNAME}
        email = ${USER_NAME}@$(hostname -f)
[push]
        default = simple
        autoSetupRemote = true
[color]
        ui = auto
[pull]
        rebase = false
EOF
) | sudo -u "${USER_NAME}" tee "/home/${USER_NAME}/.gitconfig"


# ====== User icon ==========================================================
if [ "${UNAME}" == "Linux" ] ; then
   if [ -e /tmp/face-icons/Face-Tux.png ] ; then
      sudo -u "${USER_NAME}" cp /tmp/face-icons/Face-Tux.png "/home/${USER_NAME}/.face.icon"
   fi
elif [ "${UNAME}" == "FreeBSD" ] ; then
   if [ -e /tmp/face-icons/Face-Beastie.png ] ; then
      sudo -u "${USER_NAME}" cp /tmp/face-icons/Face-Beastie.png "/home/${USER_NAME}/.face.icon"
   fi
fi


# ====== Import public keys =================================================
# Thomas Dreibholz's public keys for verifying package and Git signatures:
KEYS="21412672518D8B2D1862EFEF5CD5D12AA0877B49"
KEYSERVERS="keyserver.ubuntu.com"   # 162.213.33.8 162.213.33.9
for key in ${KEYS} ; do
   foundKey=0
   # ------ First, try to fetch the key from a key server -------------------
   # GnuPG is picky with the DNS server response, and OsloMet has a lot of
   # obscure firewall rules as well => this may fail here!
   for keyServer in ${KEYSERVERS} ; do
      if sudo -u "${USER_NAME}" gpg \
            --homedir "/home/${USER_NAME}/.gnupg" \
            --keyserver "hkp://${keyServer}" \
            --recv-keys "${key}" ; then
         echo "Got ${key} from ${keyServer}!"
         foundKey=1
         break
      fi
   done
   # ------ If this fails, try to fetch the key from the NNTB server --------
   if [ ${foundKey} -eq 0 ] ; then
      if [ -x /usr/bin/wget ] ; then
         wget "https://www.nntb.no/~dreibh/${key}.asc" -O "/tmp/${key}.asc"
      else
         curl "https://www.nntb.no/~dreibh/${key}.asc" >"/tmp/${key}.asc"
      fi
      if sudo -u "${USER_NAME}" gpg \
            --homedir "/home/${USER_NAME}/.gnupg" \
            --import "/tmp/${key}.asc" ; then
         echo "Got ${key} from NNTB web server!"
         foundKey=1
         break
      fi
   fi
   # ------ Check for success -----------------------------------------------
   if [ ${foundKey} -eq 0 ] ; then
      echo >&2 "ERROR: Unable to fetch key ${key}!"
      exit 1
   fi
done
