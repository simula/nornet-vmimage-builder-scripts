#!/usr/bin/env bash
#
# Autoinstall Scripts
# Copyright (C) 2017-2025 by Thomas Dreibholz
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Contact: thomas.dreibholz@gmail.com

# Bash options:
set -exu


# ###########################################################################
# The Minimal installation only contains the default packages of the
# distribution's installer, as well as tools needed for the initial system
# installation with these scripts:
# * [Bash](https://www.gnu.org/software/bash/) (shell)
# * [cURL](https://curl.se/) (download tool)
# * [Git](https://git-scm.com/) (revision management)
# * [GnuPG](https://www.gnupg.org/) (cryptography for signature checks)
# * Ping (network connectivity check)
# * [Sudo](https://www.sudo.ws/) (privileged command execution)
# * [Virt-What](https://people.redhat.com/~rjones/virt-what/) (identification of virtualisation environment)
#
# Further properties:
# * /etc/os-release with operating system information exists
# * Bash as default shell
# * ECN enabled
# * SCTP enabled
# * SSH server enabled
# * Hardened SSH server and client settings
# * UTF-8 character encoding
# * Enabled automatic installation of updates
# ###########################################################################


# ====== Check/set environment variables ====================================
if [ ! -e /etc/os-release ] ; then
   echo >&2 "ERROR: /etc/os-release does not exist!"
   exit 1
fi
. /etc/os-release


# ====== Package installation ===============================================

# ------ Ubuntu/Debian ------------------------------------------------------
if [ "${ID}" == "ubuntu" ] || [ "${ID}" == "debian" ] ; then

   # Make 3 APT package download retries, in case of network problems:
   echo 'Acquire::Retries "3";' >/etc/apt/apt.conf.d/80retries

   # Ubuntu: add PPA dreibh/ppa
   if [ "${ID}" == "ubuntu" ] ; then
      env DEBIAN_FRONTEND=noninteractive /usr/bin/apt-get dist-upgrade -y
      env DEBIAN_FRONTEND=noninteractive /usr/bin/apt-get install -y --no-install-recommends software-properties-common
      /usr/bin/apt-add-repository -y ppa:dreibh/ppa
   fi

   # Ensure that the installed packages are up-to-date:
   /usr/bin/apt-get update
   env DEBIAN_FRONTEND=noninteractive /usr/bin/apt-get dist-upgrade -y

   packages="
      bash
      bash-completion
      curl
      git
      gnupg
      iputils-ping
      openssh-server
      sudo
      virt-what
   "

   # Old Ubuntu versions 12.04/14.04/16.04 show a splash image during boot,
   # which may lead to a blank screen -> turning splash off as work-around:
   if [ "${ID}" == "ubuntu" ] && [[  "${VERSION_ID}" =~ ^1[246]\.[01][04]$ ]] ; then
      if [ -e /etc/default/grub ] ; then
         sed -e 's/^GRUB_CMDLINE_LINUX_DEFAULT=\(.*\) splash\(.*\)$/GRUB_CMDLINE_LINUX_DEFAULT=\1\2/' -i /etc/default/grub
         update-grub
      fi
   fi

   # shellcheck disable=SC2086
   env DEBIAN_FRONTEND=noninteractive /usr/bin/apt-get install -y --no-install-recommends ${packages}

# ------ Fedora -------------------------------------------------------------
elif [ "${ID}" == "fedora" ] ; then

   # Make sure that DNF has COPR support:
   /usr/bin/dnf install -y 'dnf-command(copr)'

   # Add COPR PPA dreibh/ppa:
   /usr/bin/dnf copr enable -y dreibh/ppa

   # Ensure that the installed packages are up-to-date:
   /usr/bin/dnf upgrade -y

   packages="
      bash
      bash-completion
      curl
      dnf-automatic
      git
      gpg
      iputils
      kernel-modules-extra
      openssh-server
      sudo
      virt-what
   "

   # shellcheck disable=SC2086
   /usr/bin/dnf install -y ${packages}

# ------ FreeBSD ------------------------------------------------------------
elif [ "${ID}" == "freebsd" ] ; then

   # Ensure that the installed packages are up-to-date:
   /usr/sbin/pkg upgrade -y

   packages="
      bash
      bash-completion
      curl
      git
      gnupg
      sudo
      virt-what
   "

   # shellcheck disable=SC2086
   /usr/sbin/pkg install -y ${packages}

   # ------ Prepare FreeBSD Sources -----------------------------------------
   cd /usr/src
   /usr/local/bin/git init -b main
   /usr/local/bin/git remote add freebsd https://github.com/freebsd/freebsd.git
   /usr/local/bin/git config --add remote.freebsd.fetch "+refs/notes/*:refs/notes/*"
   /usr/local/bin/git config pull.rebase true
   # Not running this here:
   # /usr/local/bin/git fetch freebsd
   # /usr/local/bin/git checkout main

   # ------ Prepare FreeBSD Ports Collection --------------------------------
   # See: https://wiki.freebsd.org/Ports/GitQuickStart
   cd /usr/ports
   /usr/local/bin/git init -b main
   /usr/local/bin/git remote add freebsd https://git.freebsd.org/ports.git
   /usr/local/bin/git remote set-url --push freebsd ssh://git@gitrepo.freebsd.org/ports.git
   /usr/local/bin/git config --add remote.freebsd.fetch "+refs/notes/*:refs/notes/*"
   /usr/local/bin/git config pull.rebase true
   # Not running this here:
   # /usr/local/bin/git fetch freebsd
   # /usr/local/bin/git checkout main

# ------ Unknown ------------------------------------------------------------
else

   echo >&2 "ERROR: Unknown ID ${ID} in /etc/os-release. The installation script may need an update for supporting this system!"
   exit 1

fi


# ====== Verify command availability ========================================
echo "Verifying command availability:"
errors=0
for command in bash curl git gpg ping sudo virt-what ; do
   echo -n "${command}: "
   if which ${command} >/dev/null ; then
      echo "OK"
   else
      echo "FAILED!"
      errors=$((errors+1))
   fi
done
if [ ${errors} -gt 0 ] ; then
   echo >&2 "ERROR: ${errors} packages are missing!"
   exit 1
fi
