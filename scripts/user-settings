#!/usr/bin/env bash
#
# Autoinstall Scripts
# Copyright (C) 2017-2024 by Thomas Dreibholz
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Contact: dreibh@simula.no

# Bash options:
set -ex


UNAME="$(uname)"


# ====== Set timezone =======================================================
if [ "${UNAME}" == "Linux" ] ; then
   TIMEZONE="Europe/Oslo"
   if [ -x /usr/bin/timedatectl ] ; then
      rm -f /etc/localtime
      ln -snf /usr/share/zoneinfo/${TIMEZONE} /etc/localtime
      # This command may fail in a Docker container, due to systemd not running:
      /usr/bin/timedatectl set-timezone ${TIMEZONE} || true
   else
      if [ -e /usr/bin/apt-get ] ; then
         # ------ Old Ubuntu (12.04 etc.) -----------------------------------
         if [ ! -e /usr/bin/apt ] ; then
            echo "${TIMEZONE}" >/etc/timezone
            dpkg-reconfigure -f noninteractive tzdata
         fi
      fi
   fi
fi


# ====== Set sysctls ========================================================
if [ "${UNAME}" == "Linux" ] ; then
   cat >>/etc/sysctl.conf <<EOF

#############################################################################

# ------ Custom settings ----------------------------------------------------
# Enable ECN:
net.ipv4.tcp_ecn=1

# ------ TCP settings -------------------------------------------------------
# Turn off auto-tuning of the TCP receive buffer size:
# net.ipv4.tcp_moderate_rcvbuf=0
# net.netfilter.nf_conntrack_icmp_timeout=60

# net.core.rmem_default=212992
# net.core.rmem_max=134217728
# net.core.wmem_default=212992
# net.core.wmem_max=134217728
# net.ipv4.tcp_rmem='4096 87380 134217728'
# net.ipv4.tcp_wmem='4096 16384 134217728'
# net.ipv4.tcp_mem='134217728 134217728 134217728'
# net.ipv4.route.flush=1
# net.ipv6.route.flush=1

# ----- MPTCP settings ------------------------------------------------------
# net.mptcp.mptcp_enabled=1
# net.mptcp.mptcp_path_manager=fullmesh
EOF

elif [ "${UNAME}" == "FreeBSD" ] ; then
   cat >>/etc/sysctl.conf <<EOF

#############################################################################

# ------ Custom settings ----------------------------------------------------
# Enable ECN:
net.inet.tcp.ecn.enable=1
# Make sure power off works with EFI:
hw.efi.poweroff=0
EOF

fi


# ====== Initial .bashrc ====================================================
if [ "${UNAME}" == "FreeBSD" ] ; then
   # This is "base64 /etc/skel/.bashrc" on Ubuntu 22.04 LTS.
   base64 -d >/home/"${USER_NAME}"/.bashrc <<EOF
IyB+Ly5iYXNocmM6IGV4ZWN1dGVkIGJ5IGJhc2goMSkgZm9yIG5vbi1sb2dpbiBzaGVsbHMuCiMg
c2VlIC91c3Ivc2hhcmUvZG9jL2Jhc2gvZXhhbXBsZXMvc3RhcnR1cC1maWxlcyAoaW4gdGhlIHBh
Y2thZ2UgYmFzaC1kb2MpCiMgZm9yIGV4YW1wbGVzCgojIElmIG5vdCBydW5uaW5nIGludGVyYWN0
aXZlbHksIGRvbid0IGRvIGFueXRoaW5nCmNhc2UgJC0gaW4KICAgICppKikgOzsKICAgICAgKikg
cmV0dXJuOzsKZXNhYwoKIyBkb24ndCBwdXQgZHVwbGljYXRlIGxpbmVzIG9yIGxpbmVzIHN0YXJ0
aW5nIHdpdGggc3BhY2UgaW4gdGhlIGhpc3RvcnkuCiMgU2VlIGJhc2goMSkgZm9yIG1vcmUgb3B0
aW9ucwpISVNUQ09OVFJPTD1pZ25vcmVib3RoCgojIGFwcGVuZCB0byB0aGUgaGlzdG9yeSBmaWxl
LCBkb24ndCBvdmVyd3JpdGUgaXQKc2hvcHQgLXMgaGlzdGFwcGVuZAoKIyBmb3Igc2V0dGluZyBo
aXN0b3J5IGxlbmd0aCBzZWUgSElTVFNJWkUgYW5kIEhJU1RGSUxFU0laRSBpbiBiYXNoKDEpCkhJ
U1RTSVpFPTEwMDAKSElTVEZJTEVTSVpFPTIwMDAKCiMgY2hlY2sgdGhlIHdpbmRvdyBzaXplIGFm
dGVyIGVhY2ggY29tbWFuZCBhbmQsIGlmIG5lY2Vzc2FyeSwKIyB1cGRhdGUgdGhlIHZhbHVlcyBv
ZiBMSU5FUyBhbmQgQ09MVU1OUy4Kc2hvcHQgLXMgY2hlY2t3aW5zaXplCgojIElmIHNldCwgdGhl
IHBhdHRlcm4gIioqIiB1c2VkIGluIGEgcGF0aG5hbWUgZXhwYW5zaW9uIGNvbnRleHQgd2lsbAoj
IG1hdGNoIGFsbCBmaWxlcyBhbmQgemVybyBvciBtb3JlIGRpcmVjdG9yaWVzIGFuZCBzdWJkaXJl
Y3Rvcmllcy4KI3Nob3B0IC1zIGdsb2JzdGFyCgojIG1ha2UgbGVzcyBtb3JlIGZyaWVuZGx5IGZv
ciBub24tdGV4dCBpbnB1dCBmaWxlcywgc2VlIGxlc3NwaXBlKDEpClsgLXggL3Vzci9iaW4vbGVz
c3BpcGUgXSAmJiBldmFsICIkKFNIRUxMPS9iaW4vc2ggbGVzc3BpcGUpIgoKIyBzZXQgdmFyaWFi
bGUgaWRlbnRpZnlpbmcgdGhlIGNocm9vdCB5b3Ugd29yayBpbiAodXNlZCBpbiB0aGUgcHJvbXB0
IGJlbG93KQppZiBbIC16ICIke2RlYmlhbl9jaHJvb3Q6LX0iIF0gJiYgWyAtciAvZXRjL2RlYmlh
bl9jaHJvb3QgXTsgdGhlbgogICAgZGViaWFuX2Nocm9vdD0kKGNhdCAvZXRjL2RlYmlhbl9jaHJv
b3QpCmZpCgojIHNldCBhIGZhbmN5IHByb21wdCAobm9uLWNvbG9yLCB1bmxlc3Mgd2Uga25vdyB3
ZSAid2FudCIgY29sb3IpCmNhc2UgIiRURVJNIiBpbgogICAgeHRlcm0tY29sb3J8Ki0yNTZjb2xv
cikgY29sb3JfcHJvbXB0PXllczs7CmVzYWMKCiMgdW5jb21tZW50IGZvciBhIGNvbG9yZWQgcHJv
bXB0LCBpZiB0aGUgdGVybWluYWwgaGFzIHRoZSBjYXBhYmlsaXR5OyB0dXJuZWQKIyBvZmYgYnkg
ZGVmYXVsdCB0byBub3QgZGlzdHJhY3QgdGhlIHVzZXI6IHRoZSBmb2N1cyBpbiBhIHRlcm1pbmFs
IHdpbmRvdwojIHNob3VsZCBiZSBvbiB0aGUgb3V0cHV0IG9mIGNvbW1hbmRzLCBub3Qgb24gdGhl
IHByb21wdAojZm9yY2VfY29sb3JfcHJvbXB0PXllcwoKaWYgWyAtbiAiJGZvcmNlX2NvbG9yX3By
b21wdCIgXTsgdGhlbgogICAgaWYgWyAteCAvdXNyL2Jpbi90cHV0IF0gJiYgdHB1dCBzZXRhZiAx
ID4mL2Rldi9udWxsOyB0aGVuCgkjIFdlIGhhdmUgY29sb3Igc3VwcG9ydDsgYXNzdW1lIGl0J3Mg
Y29tcGxpYW50IHdpdGggRWNtYS00OAoJIyAoSVNPL0lFQy02NDI5KS4gKExhY2sgb2Ygc3VjaCBz
dXBwb3J0IGlzIGV4dHJlbWVseSByYXJlLCBhbmQgc3VjaAoJIyBhIGNhc2Ugd291bGQgdGVuZCB0
byBzdXBwb3J0IHNldGYgcmF0aGVyIHRoYW4gc2V0YWYuKQoJY29sb3JfcHJvbXB0PXllcwogICAg
ZWxzZQoJY29sb3JfcHJvbXB0PQogICAgZmkKZmkKCmlmIFsgIiRjb2xvcl9wcm9tcHQiID0geWVz
IF07IHRoZW4KICAgIFBTMT0nJHtkZWJpYW5fY2hyb290OisoJGRlYmlhbl9jaHJvb3QpfVxbXDAz
M1swMTszMm1cXVx1QFxoXFtcMDMzWzAwbVxdOlxbXDAzM1swMTszNG1cXVx3XFtcMDMzWzAwbVxd
XCQgJwplbHNlCiAgICBQUzE9JyR7ZGViaWFuX2Nocm9vdDorKCRkZWJpYW5fY2hyb290KX1cdUBc
aDpcd1wkICcKZmkKdW5zZXQgY29sb3JfcHJvbXB0IGZvcmNlX2NvbG9yX3Byb21wdAoKIyBJZiB0
aGlzIGlzIGFuIHh0ZXJtIHNldCB0aGUgdGl0bGUgdG8gdXNlckBob3N0OmRpcgpjYXNlICIkVEVS
TSIgaW4KeHRlcm0qfHJ4dnQqKQogICAgUFMxPSJcW1xlXTA7JHtkZWJpYW5fY2hyb290OisoJGRl
Ymlhbl9jaHJvb3QpfVx1QFxoOiBcd1xhXF0kUFMxIgogICAgOzsKKikKICAgIDs7CmVzYWMKCiMg
ZW5hYmxlIGNvbG9yIHN1cHBvcnQgb2YgbHMgYW5kIGFsc28gYWRkIGhhbmR5IGFsaWFzZXMKaWYg
WyAteCAvdXNyL2Jpbi9kaXJjb2xvcnMgXTsgdGhlbgogICAgdGVzdCAtciB+Ly5kaXJjb2xvcnMg
JiYgZXZhbCAiJChkaXJjb2xvcnMgLWIgfi8uZGlyY29sb3JzKSIgfHwgZXZhbCAiJChkaXJjb2xv
cnMgLWIpIgogICAgYWxpYXMgbHM9J2xzIC0tY29sb3I9YXV0bycKICAgICNhbGlhcyBkaXI9J2Rp
ciAtLWNvbG9yPWF1dG8nCiAgICAjYWxpYXMgdmRpcj0ndmRpciAtLWNvbG9yPWF1dG8nCgogICAg
YWxpYXMgZ3JlcD0nZ3JlcCAtLWNvbG9yPWF1dG8nCiAgICBhbGlhcyBmZ3JlcD0nZmdyZXAgLS1j
b2xvcj1hdXRvJwogICAgYWxpYXMgZWdyZXA9J2VncmVwIC0tY29sb3I9YXV0bycKZmkKCiMgY29s
b3JlZCBHQ0Mgd2FybmluZ3MgYW5kIGVycm9ycwojZXhwb3J0IEdDQ19DT0xPUlM9J2Vycm9yPTAx
OzMxOndhcm5pbmc9MDE7MzU6bm90ZT0wMTszNjpjYXJldD0wMTszMjpsb2N1cz0wMTpxdW90ZT0w
MScKCiMgc29tZSBtb3JlIGxzIGFsaWFzZXMKYWxpYXMgbGw9J2xzIC1hbEYnCmFsaWFzIGxhPSds
cyAtQScKYWxpYXMgbD0nbHMgLUNGJwoKIyBBZGQgYW4gImFsZXJ0IiBhbGlhcyBmb3IgbG9uZyBy
dW5uaW5nIGNvbW1hbmRzLiAgVXNlIGxpa2Ugc286CiMgICBzbGVlcCAxMDsgYWxlcnQKYWxpYXMg
YWxlcnQ9J25vdGlmeS1zZW5kIC0tdXJnZW5jeT1sb3cgLWkgIiQoWyAkPyA9IDAgXSAmJiBlY2hv
IHRlcm1pbmFsIHx8IGVjaG8gZXJyb3IpIiAiJChoaXN0b3J5fHRhaWwgLW4xfHNlZCAtZSAnXCcn
cy9eXHMqWzAtOV1cK1xzKi8vO3MvWzsmfF1ccyphbGVydCQvLydcJycpIicKCiMgQWxpYXMgZGVm
aW5pdGlvbnMuCiMgWW91IG1heSB3YW50IHRvIHB1dCBhbGwgeW91ciBhZGRpdGlvbnMgaW50byBh
IHNlcGFyYXRlIGZpbGUgbGlrZQojIH4vLmJhc2hfYWxpYXNlcywgaW5zdGVhZCBvZiBhZGRpbmcg
dGhlbSBoZXJlIGRpcmVjdGx5LgojIFNlZSAvdXNyL3NoYXJlL2RvYy9iYXNoLWRvYy9leGFtcGxl
cyBpbiB0aGUgYmFzaC1kb2MgcGFja2FnZS4KCmlmIFsgLWYgfi8uYmFzaF9hbGlhc2VzIF07IHRo
ZW4KICAgIC4gfi8uYmFzaF9hbGlhc2VzCmZpCgojIGVuYWJsZSBwcm9ncmFtbWFibGUgY29tcGxl
dGlvbiBmZWF0dXJlcyAoeW91IGRvbid0IG5lZWQgdG8gZW5hYmxlCiMgdGhpcywgaWYgaXQncyBh
bHJlYWR5IGVuYWJsZWQgaW4gL2V0Yy9iYXNoLmJhc2hyYyBhbmQgL2V0Yy9wcm9maWxlCiMgc291
cmNlcyAvZXRjL2Jhc2guYmFzaHJjKS4KaWYgISBzaG9wdCAtb3EgcG9zaXg7IHRoZW4KICBpZiBb
IC1mIC91c3Ivc2hhcmUvYmFzaC1jb21wbGV0aW9uL2Jhc2hfY29tcGxldGlvbiBdOyB0aGVuCiAg
ICAuIC91c3Ivc2hhcmUvYmFzaC1jb21wbGV0aW9uL2Jhc2hfY29tcGxldGlvbgogIGVsaWYgWyAt
ZiAvZXRjL2Jhc2hfY29tcGxldGlvbiBdOyB0aGVuCiAgICAuIC9ldGMvYmFzaF9jb21wbGV0aW9u
CiAgZmkKZmkK
EOF

   cat >/home/"${USER_NAME}"/.bash_profile <<EOF
test -f ~/.bashrc && source ~/.bashrc
EOF
fi


# ====== Make some additions to .bashrc =====================================
cat >>/home/"${USER_NAME}"/.bashrc <<EOF


# ---------------------------------------------------------------------------

alias runws="sudo echo Starting Wireshark && ( sudo wireshark & )"

ulimit -c unlimited

export EDITOR=joe
export CVSEDITOR=\${EDITOR}
export SVN_EDITOR=\${EDITOR}
export XZ_DEFAULTS="--threads=0"

cores=\`getconf _NPROCESSORS_ONLN 2>/dev/null || true\`
if [ \$cores -gt 1 ] ; then
   export MAKEFLAGS=-j\${cores}
fi
EOF
sudo chown "${USER_NAME}":"${USER_NAME}" /home/"${USER_NAME}"/.bashrc


# ====== Make some directories ==============================================
sudo -u "${USER_NAME}" mkdir -p /home/"${USER_NAME}"/src
if [ -x /usr/bin/chattr ] ; then
   sudo -u "${USER_NAME}" /usr/bin/chattr +c /home/"${USER_NAME}"/src || true
fi
sudo -u "${USER_NAME}" mkdir -p /home/"${USER_NAME}"/tmp

sudo -u "${USER_NAME}" mkdir -p /home/"${USER_NAME}"/.ssh
sudo -u "${USER_NAME}" chmod 700 /home/"${USER_NAME}"/.ssh
sudo -u "${USER_NAME}" touch /home/"${USER_NAME}"/.ssh/authorized_keys
sudo -u "${USER_NAME}" chmod 600 /home/"${USER_NAME}"/.ssh/authorized_keys


# ====== Import public keys =================================================
# Thomas Dreibholz's public keys for verifying package and Git signatures:
KEYS="21412672518D8B2D1862EFEF5CD5D12AA0877B49"
KEYSERVERS="keyserver.ubuntu.com 162.213.33.8 162.213.33.9"
for key in ${KEYS} ; do
   foundKey=0
   # ------ First, try to fetch the key from a key server -------------------
   # GnuPG is picky with the DNS server response, and OsloMet has a lot of
   # obscure firewall rules as well => this may fail here!
   for keyServer in ${KEYSERVERS} ; do
      if sudo -u "${USER_NAME}" gpg \
            --homedir /home/"${USER_NAME}"/.gnupg \
            --keyserver hkp://"${keyServer}" \
            --recv-keys ${key} ; then
         echo "Got ${key} from ${keyServer}!"
         foundKey=1
         break
      fi
   done
   # ------ If this fails, try to fetch the key from the NNTB server --------
   if [ ${foundKey} -eq 0 ] ; then
      if [ -x /usr/bin/wget ] ; then
         wget "https://www.nntb.no/~dreibh/${key}.asc" -O /tmp/${key}.asc
      else
         curl "https://www.nntb.no/~dreibh/${key}.asc" >/tmp/${key}.asc
      fi
      if sudo -u "${USER_NAME}" gpg \
            --homedir /home/"${USER_NAME}"/.gnupg \
            --import /tmp/${key}.asc ; then
         echo "Got ${key} from NNTB web server!"
         foundKey=1
         break
      fi
   fi
   # ------ Check for success -----------------------------------------------
   if [ ${foundKey} -eq 0 ] ; then
      echo >&2 "ERROR: Unable to fetch key ${key}!"
      exit 1
   fi
done


# ====== Renew SSH keys and enforce strong cipher configurations ============
if [ -e /usr/bin/Create-New-SSH-Node-Keys ] ; then
   /usr/bin/Create-New-SSH-Node-Keys -yes-to-all-i-am-really-sure
fi
