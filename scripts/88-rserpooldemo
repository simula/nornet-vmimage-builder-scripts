#!/usr/bin/env bash
#
# Autoinstall Scripts
# Copyright (C) 2017-2024 by Thomas Dreibholz
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Contact: dreibh@simula.no

# Bash options:
set -exu


# ###### Run a command, retry multiple times in case of an error ############
try-hard ()
{
   local max_trials=$1
   local delay=$2
   shift 2

   local trial=0
   while true ; do
      trial=$(( trial+1 ))
      echo "Trial ${trial}: $*"
      # shellcheck disable=SC2068
      $@ && return 0
      if [ ${trial} -ge "${max_trials}" ] ; then
         exit 1
      fi
      echo "Waiting ${delay} s before next try ..."
      sleep "${delay}"
   done
}


# ###### Clone or update Git repository #####################################
clone-or-update ()
{
   local repository="$1"
   local url="$2"
   local clone_maxtrials=10
   local clone_delay=60
   if [ ! -e "${repository}" ] ; then
      try-hard ${clone_maxtrials} ${clone_delay}   sudo -u "${USER_NAME}" git clone "${url}" "${repository}"
   else
      pushd "${repository}"
      try-hard ${clone_maxtrials} ${clone_delay}   sudo -u "${USER_NAME}" git fetch --all
      try-hard ${clone_maxtrials} ${clone_delay}   sudo -u "${USER_NAME}" git pull
      popd
   fi
}


# ====== Check environment variables ========================================
if [ ! -v USER_NAME ] || [ "${USER_NAME}" == "" ] ; then
   echo >&2 "Usage: env USER_NAME=<user> $0"
   echo >&2 "Example: sudo env USER_NAME=nornetpp $0"
   exit 1
fi
if [ ! -e /etc/os-release ] ; then
   echo >&2 "ERROR: /etc/os-release is not available!"
   exit 1
fi
. /etc/os-release


# ====== Prepare source repositories ========================================
sudo -u "${USER_NAME}" mkdir -p "/home/${USER_NAME}/src"
cd "/home/${USER_NAME}/src"

clone-or-update rsplib https://dreibh@github.com/dreibh/rsplib
clone-or-update rserpooldemo https://dreibh@github.com/dreibh/rserpooldemo
clone-or-update sctplib https://dreibh@github.com/dreibh/sctplib
clone-or-update socketapi https://dreibh@github.com/dreibh/socketapi
clone-or-update vmimage-builder-scripts https://dreibh@github.com/simula/nornet-vmimage-builder-scripts.git


# ====== Package installation ===============================================

# ------ Debian -------------------------------------------------------------
if [ "${ID}" == "debian" ] ; then

   # FIXME! Work-around for RSerPool Demo not (yet) in Debian:
   packages="
      desktop-file-utils
      rsplib-fgp-cfgfiles
      rsplib-registrar
      rsplib-services
   "
   # shellcheck disable=SC2086
   env DEBIAN_FRONTEND=noninteractive /usr/bin/apt-get install -y --no-install-recommends ${packages}
   systemctl stop rsplib-registrar    || true
   systemctl disable rsplib-registrar || true
   systemctl stop rspregistrar        || true
   systemctl disable rspregistrar     || true

   cores=$(getconf _NPROCESSORS_ONLN 2>/dev/null || echo "1")
   cd "/home/${USER_NAME}/src/rserpooldemo"
   sudo -u "${USER_NAME}" cmake . -DCMAKE_INSTALL_PREFIX=/usr
   sudo -u "${USER_NAME}" make -j"${cores}"
   make install
   update-mime-database /usr/share/mime
   update-desktop-database

   mkdir -p /boot/RSerPoolDemo
   cp /usr/share/rserpooldemo/splash/Zollverein-*.jpeg /boot/RSerPoolDemo
   update-grub

# ------ Ubuntu -------------------------------------------------------------
elif [ "${ID}" == "ubuntu" ] ; then

   packages="
      rserpooldemo-desktop
      rserpooldemo-development
      rserpooldemo-tool
      rsplib-registrar
   "

   # shellcheck disable=SC2086
   env DEBIAN_FRONTEND=noninteractive /usr/bin/apt-get install -y --no-install-recommends ${packages}

   systemctl stop rspregistrar
   systemctl disable rspregistrar

# ------ Fedora -------------------------------------------------------------
elif [ "${ID}" == "fedora" ] ; then

   packages="
      pygtk2
      rserpooldemo-desktop
      rserpooldemo-development
      rserpooldemo-tool
      rsplib-registrar
   "

   # shellcheck disable=SC2086
   /usr/bin/dnf install -y ${packages}

   systemctl stop rspregistrar
   systemctl disable rspregistrar

# ------ FreeBSD ------------------------------------------------------------
elif [ "${ID}" == "freebsd" ] ; then

   # FIXME! Work-around for RSerPool Demo not (yet) in FreeBSD Ports Collection:
   cores=$(sysctl -a | grep 'hw.ncpu' | cut -d ':' -f2 | tr -d ' ' || echo "1")
   cd "/home/${USER_NAME}/src/rserpooldemo"
   sudo -u "${USER_NAME}" cmake . -DCMAKE_INSTALL_PREFIX=/usr/local
   sudo -u "${USER_NAME}" make -j"${cores}"
   make install
   update-mime-database /usr/local/share/mime
   update-desktop-database
   if [ ! -e /usr/share/rserpooldemo ] ; then
      sudo ln -s /usr/local/share/rserpooldemo /usr/share/rserpooldemo
   fi

# ------ Unknown ------------------------------------------------------------
else

   echo >&2 "ERROR: Unknown ID ${ID} in /etc/os-release. The installation script may need an update for supporting this system!"
   exit 1

fi


# ====== Add demo scenario icon to desktop ==================================
if [ "${ID}" == "freebsd" ] ; then
   usrPrefix="/usr/local"
else
   usrPrefix="/usr"
fi
sudo -u "${USER_NAME}" mkdir -p "/home/${USER_NAME}/Desktop"
if [ -e ${usrPrefix}/share/rserpooldemo/local-scenario/local-setup.xml ] ; then
   sudo -u "${USER_NAME}" ln -s ${usrPrefix}/share/rserpooldemo/local-scenario/local-setup.xml "/home/${USER_NAME}/Desktop/" || true
fi
if [ -e ${usrPrefix}/share/rserpooldemo/nornet-mec-scenario/nornet-mec-setup-localonly.xml ] ; then
   sudo -u "${USER_NAME}" ln -s ${usrPrefix}/share/rserpooldemo/nornet-mec-scenario/nornet-mec-setup-localonly.xml "/home/${USER_NAME}/Desktop/" || true
fi
