#!/usr/bin/env bash
#
# Autoinstall Scripts
# Copyright (C) 2017-2024 by Thomas Dreibholz
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Contact: dreibh@simula.no

# Bash options:
set -exu


# ====== Check/set environment variables ====================================
if [ ! -v USER_NAME ] ; then
   echo >&2 "Usage: env USER_NAME=<user> $0"
   echo >&2 "Example: sudo env USER_NAME=nornetpp $0"
   exit 1
fi
UNAME="$(uname)"


# ====== Set timezone =======================================================
if [ "${UNAME}" == "Linux" ] ; then
   TIMEZONE="Europe/Oslo"
   if [ -x /usr/bin/timedatectl ] ; then
      rm -f /etc/localtime
      ln -snf /usr/share/zoneinfo/${TIMEZONE} /etc/localtime
      # This command may fail in a Docker container, due to systemd not running:
      /usr/bin/timedatectl set-timezone ${TIMEZONE} || true
   else
      if [ -e /usr/bin/apt-get ] ; then
         # ------ Old Ubuntu (12.04 etc.) -----------------------------------
         if [ ! -e /usr/bin/apt ] ; then
            echo "${TIMEZONE}" >/etc/timezone
            dpkg-reconfigure -f noninteractive tzdata
         fi
      fi
   fi
fi


# ====== Cloud-Init configuration ===========================================
if [ "${UNAME}" == "Linux" ] ; then
   # !!! Ensure that growpart and resizefs are enabled !!!!!!!!!!!!!!!!!!!!!!!!!
   # With new Ubuntu autoinstaller:
   # /etc/cloud/cloud.cfg.d/99-installer.cfg disables growpart and resizefs
   # => fixing this here:
   if [ -e /etc/cloud/cloud.cfg.d/99-installer.cfg ] ; then
      sed -e "s#growpart: {mode: 'off'}#growpart: {mode: 'auto'}#g" \
          -e "s#resize_rootfs: false#resize_rootfs: true#g" \
          -i /etc/cloud/cloud.cfg.d/99-installer.cfg
   fi
fi


# ====== Enable SCTP module =================================================
if [ "${UNAME}" == "Linux" ] ; then
   # Load SCTP when booting:
   cat >/etc/modules-load.d/sctp.conf <<EOF
sctp
EOF

   if [ -e /etc/modprobe.d/sctp-blacklist.conf ] ; then
      # Remove blacklisting of SCTP in Fedora:
      # Just removing the blacklist file is not sufficient, since it would be
      # installed again by an update of kernel-modules-extra!
      sed -e 's/^blacklist sctp/# blacklist sctp/g' -i /etc/modprobe.d/sctp-blacklist.conf
   fi
fi


# ====== Set sysctls ========================================================
if [ "${UNAME}" == "Linux" ] ; then
   cat >>/etc/sysctl.conf <<EOF

#############################################################################

# ------ Custom settings ----------------------------------------------------
# Enable ECN:
net.ipv4.tcp_ecn=1

# ------ TCP settings -------------------------------------------------------
# Turn off auto-tuning of the TCP receive buffer size:
# net.ipv4.tcp_moderate_rcvbuf=0
# net.netfilter.nf_conntrack_icmp_timeout=60

# net.core.rmem_default=212992
# net.core.rmem_max=134217728
# net.core.wmem_default=212992
# net.core.wmem_max=134217728
# net.ipv4.tcp_rmem='4096 87380 134217728'
# net.ipv4.tcp_wmem='4096 16384 134217728'
# net.ipv4.tcp_mem='134217728 134217728 134217728'
# net.ipv4.route.flush=1
# net.ipv6.route.flush=1

# ----- MPTCP settings ------------------------------------------------------
# net.mptcp.mptcp_enabled=1
# net.mptcp.mptcp_path_manager=fullmesh
EOF

elif [ "${UNAME}" == "FreeBSD" ] ; then
   cat >>/etc/sysctl.conf <<EOF

#############################################################################

# ------ Custom settings ----------------------------------------------------
# Enable ECN:
net.inet.tcp.ecn.enable=1
# Make sure power off works with EFI:
hw.efi.poweroff=0
EOF

fi


# ====== Set FreeBSD console resolution =====================================
if [ "${UNAME}" == "FreeBSD" ] ; then
   if [ "${VIDEO}" != "" ] ; then
      cat >>/boot/loader.conf <<EOF
efi_max_resolution="${VIDEO}"
# screen.font="8x14"
EOF
   fi
fi


# ====== Hardened SSH server configuration ==================================
cat >/etc/ssh/sshd_config <<EOF
Protocol 2

# Check supported algorithms with "ssh -Q cipher|kex|key|mac"!
# The following 3 options require a very new sshd:
# PubkeyAcceptedKeyTypes    ssh-ed25519-cert-v01@openssh.com,ssh-ed25519,ssh-rsa-cert-v01@openssh.com,ssh-rsa
# HostbasedAcceptedKeyTypes ssh-ed25519-cert-v01@openssh.com,ssh-ed25519,ssh-rsa-cert-v01@openssh.com,ssh-rsa
# HostKeyAlgorithms         ssh-ed25519-cert-v01@openssh.com,ssh-ed25519,ssh-ed25519,ssh-rsa-cert-v01@openssh.com,ssh-rsa
Ciphers                   aes256-gcm@openssh.com,chacha20-poly1305@openssh.com
MACs                      hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com
KexAlgorithms             curve25519-sha256@libssh.org,diffie-hellman-group-exchange-sha256

UsePAM                    yes
X11Forwarding             yes
TCPKeepAlive              yes
ClientAliveInterval       60
ClientAliveCountMax       3

AcceptEnv                 LANG LC_*
EOF
for sftp in /usr/lib/openssh/sftp-server /usr/libexec/sftp-server ; do
   if [ -e "$sftp" ] ; then
      echo "Subsystem sftp $sftp" >>/etc/ssh/sshd_config
      break
   fi
done


# ====== Hardened SSH client configuration ==================================
cat >/etc/ssh/ssh_config <<EOF
Protocol 2

# Check supported algorithms with "ssh -Q cipher|kex|key|mac"!
Ciphers                   aes256-gcm@openssh.com,chacha20-poly1305@openssh.com,aes256-ctr
MACs                      hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512
KexAlgorithms             curve25519-sha256@libssh.org,diffie-hellman-group-exchange-sha256,ecdh-sha2-nistp521,ecdh-sha2-nistp384,ecdh-sha2-nistp256
# To prefer RSA:
# HostKeyAlgorithms         ssh-rsa-cert-v01@openssh.com,ssh-rsa,ecdsa-sha2-nistp521-cert-v01@openssh.com,ssh-ed25519-cert-v01@openssh.com,ssh-ed25519,ssh-ed25519,ecdsa-sha2-nistp384-cert-v01@openssh.com,ecdsa-sha2-nistp256-cert-v01@openssh.com
# To prefer ED25519:
HostKeyAlgorithms         ssh-ed25519-cert-v01@openssh.com,ssh-ed25519,ssh-ed25519,ssh-rsa-cert-v01@openssh.com,ssh-rsa,ecdsa-sha2-nistp521-cert-v01@openssh.com,ecdsa-sha2-nistp384-cert-v01@openssh.com,ecdsa-sha2-nistp256-cert-v01@openssh.com

VerifyHostKeyDNS          ask
HashKnownHosts            yes
GSSAPIAuthentication      yes
GSSAPIDelegateCredentials no

TCPKeepAlive              yes
ServerAliveInterval       30
ServerAliveCountMax       3

SendEnv                   LANG LC_*
EOF


# ====== Prepare temorary directories for further setup =====================
directories="
   bootsplash-images
   configuration-files
   desktop-backgrounds
   face-icons
   system-info
   wireshark
"
for directory in ${directories} ; do
   mkdir -p "/tmp/${directory}"
   chown "${USER_NAME}":"${USER_NAME}" "/tmp/${directory}"
done
