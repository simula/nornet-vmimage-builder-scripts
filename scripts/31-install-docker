#!/usr/bin/env bash
#
# Autoinstall Scripts
# Copyright (C) 2017-2025 by Thomas Dreibholz
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Contact: thomas.dreibholz@gmail.com

# Bash options:
set -eux


# ====== Check/set environment variables ====================================
if [ ! -v USER_NAME ] || [ "${USER_NAME}" == "" ] ; then
   echo >&2 "Usage: env USER_NAME=<user> $0"
   echo >&2 "Example: sudo env USER_NAME=nornetpp $0"
   exit 1
fi
if [ ! -e /etc/os-release ] ; then
   echo >&2 "ERROR: /etc/os-release does not exist!"
   exit 1
fi
. /etc/os-release
UNAME="$(uname)"


# ====== Package installation ===============================================
architecture="$(uname -m)"
if [[ ! "${architecture}" =~ ^(amd64|x86_64|arm64|aarch64)$ ]] ; then
   echo "Docker is (currently) only available on AMD64 and ARM64 => nothing to do here!"
   exit 0
fi

# ------ Ubuntu/Debian ------------------------------------------------------
if [ "${ID}" == "ubuntu" ] || [ "${ID}" == "debian" ] ; then

   # Add Docker's official GPG key:
   env DEBIAN_FRONTEND=noninteractive /usr/bin/apt-get update
   env DEBIAN_FRONTEND=noninteractive /usr/bin/apt-get install -y --no-install-recommends \
      ca-certificates curl
   install -m 0755 -d /etc/apt/keyrings
   curl -fsSL "https://download.docker.com/linux/${ID}/gpg" -o /etc/apt/keyrings/docker.asc
   chmod a+r /etc/apt/keyrings/docker.asc

   # Add the repository to Apt sources:
   echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/${ID} ${VERSION_CODENAME} stable" | \
     tee /etc/apt/sources.list.d/docker.list >/dev/null
   env DEBIAN_FRONTEND=noninteractive /usr/bin/apt-get update

   # Programs:
   packages="
      docker-ce
      docker-ce-cli
      containerd.io
      docker-buildx-plugin
      docker-compose-plugin
   "

   # shellcheck disable=SC2086
   env DEBIAN_FRONTEND=noninteractive /usr/bin/apt-get install -y -m --no-install-recommends ${packages}

   # Add user to "docker" group:
   usermod -a -G docker "${USER_NAME}"


# ------ Fedora -------------------------------------------------------------
elif [ "${ID}" == "fedora" ] ; then

   # Add Docker repository:
   if [ "${VERSION_ID}" -ge 41 ] ; then
      dnf5 config-manager addrepo --overwrite --from-repofile=https://download.docker.com/linux/fedora/docker-ce.repo
   else
      # Before Fedora 41:
      dnf config-manager --add-repo https://download.docker.com/linux/fedora/docker-ce.repo
   fi

   # Programs:
   packages="
      docker-ce
      docker-ce-cli
      containerd.io
      docker-buildx-plugin
      docker-compose-plugin
   "

   # shellcheck disable=SC2086
   /usr/bin/dnf install --setopt=install_weak_deps=False -y ${packages}

   # Add user to "docker" group:
   usermod -a -G docker "${USER_NAME}"


# ------ FreeBSD ------------------------------------------------------------
elif [ "${ID}" == "freebsd" ] ; then

   # There is no Docker in FreeBSD, yet!
   true

# ------ Unknown ------------------------------------------------------------
else

   echo >&2 "ERROR: Unknown ID ${ID} in /etc/os-release. The installation script may need an update for supporting this system!"
   exit 1

fi


# ====== Configuration ======================================================
if [ -d "/etc/docker" ] && [ ! -e "/etc/docker/daemon.json" ] ; then
   # By default, Docker creates a network interface docker0 172.17.0.1/16.
   # Since all systems have the same network, it interferes with SCTP.
   # SCTP assumes that source and destination host are the same => ABORT
   # Solution: Creating a /26 network with random link-local IPv4 address.
   network="169.254.$(( 1 + (RANDOM % 253) )).$(( ((RANDOM % 4) << 6) + 1 ))/26"
   ( cat <<EOF
{
  "bip": "${network}",
  "ipv6": true
}
EOF
   ) | sudo tee "/etc/docker/daemon.json"
   service docker restart || true
fi


# ====== Verify command availability ========================================

echo "Verifying command availability:"
errors=0
if [ "$(uname)" == "Linux" ] ; then
   # shellcheck disable=SC2043
   for command in docker ; do
      echo -n "${command}: "
      if which ${command} >/dev/null ; then
         echo "OK"
      else
         echo "FAILED!"
         errors=$((errors+1))
      fi
   done
fi
if [ ${errors} -gt 0 ] ; then
   echo >&2 "ERROR: ${errors} packages are missing!"
   exit 1
fi
