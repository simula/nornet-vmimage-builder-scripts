#!/usr/bin/env bash
#
# Template VM Image Builder
# Copyright (C) 2017-2020 by Thomas Dreibholz
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Contact: dreibh@simula.no

set -e


# ###### Defaults ###########################################################
PROJECT="Template"
HYPERVISOR="VirtualBox"
DISTRIBUTION="Ubuntu"
RELEASE="20.04"
PROVISIONERS="user-settings development-system"   # "clean-up" will be added later!

DRY_RUN=0

USE_SEPARATE_DISKS=1
VM_DISK_ROOT=32768
VM_DISK_HOME=131072
VM_DISK_SWAP=4096

VIDEO="1024x768"
XKBMODEL="pc105"
XKBLAYOUT="de"
XKBVARIANT="nodeadkeys"
XKBOPTIONS=""


# ###### Handle command-line parameters #####################################
while [ $# -gt 0 ] ; do
   if [ "$1" == "--hypervisor" -o "$1" == "-H" ] ; then
      HYPERVISOR="$2"
      shift
   elif [ "$1" == "--project" -o "$1" == "-P" ] ; then
      PROJECT="$2"
      shift
   elif [ "$1" == "--distribution" -o "$1" == "-D" ] ; then
      DISTRIBUTION="$2"
      shift
   elif [ "$1" == "--release" -o "$1" == "-R" ] ; then
      RELEASE="$2"
      shift
   elif [ "$1" == "--video" -o "$1" == "-V" ] ; then
      VIDEO="$2"
      if [ "${VIDEO}" == "XGA" ] ; then
         VIDEO="1024x768"   # Standard, 4:3
      elif [ "${VIDEO}" == "SXGA" ] ; then
         VIDEO="1280x960"   # SXGA-, 4:3
      elif [ "${VIDEO}" == "HD" ] ; then
         VIDEO="1280x720"   # HD, 16:9
      elif [ "${VIDEO}" == "HD+" ] ; then
         VIDEO="1600x900"   # HD+, 16:9
      elif [ "${VIDEO}" == "FHD" ] ; then
         VIDEO="1920x1080"  # Full HD, 16:9
      elif [ "${VIDEO}" == "UHD" ] ; then
         VIDEO="3840x2160"  # 4K, 16:9
      fi
      if [[ ! "${VIDEO}" =~ ^[0-9]*x[0-9]*$ ]] ; then
         echo >&2 "ERROR: Bad video setting: ${VIDEO}"
         exit 1
      fi
      shift
   elif [ "$1" == "--keyboard-model" -o "$1" == "-m" ] ; then
      XKBMODEL="$2"
      shift
   elif [ "$1" == "--keyboard-layout" -o "$1" == "-l" ] ; then
      XKBLAYOUT="$2"
      shift
   elif [ "$1" == "--keyboard-variant" -o "$1" == "-v" ] ; then
      XKBVARIANT="$2"
      shift
   elif [ "$1" == "--keyboard-options" -o "$1" == "-o" ] ; then
      XKBOPTIONS="$2"
      shift
   elif [ "$1" == "--root" -o "$1" == "-r" ] ; then
      VM_DISK_ROOT="$2"
      if [[ ! "${VM_DISK_ROOT}" =~ ^[0-9]*$ ]] ; then
         echo >&2 "ERROR: Bad size for root: ${VM_DISK_ROOT} MiB"
         exit 1
      fi
      shift
   elif [ "$1" == "--home" -o "$1" == "-r" ] ; then
      VM_DISK_ROOT="$2"
      if [[ ! "${VM_DISK_HOME}" =~ ^[0-9]*$ ]] ; then
         echo >&2 "ERROR: Bad size for home: ${VM_DISK_HOME} MiB"
         exit 1
      fi
      shift
   elif [ "$1" == "--swap" -o "$1" == "-r" ] ; then
      VM_DISK_ROOT="$2"
      if [[ ! "${VM_DISK_SWAP}" =~ ^[0-9]*$ ]] ; then
         echo >&2 "ERROR: Bad size for swap: ${VM_DISK_SWAP} MiB"
         exit 1
      fi
      shift
   elif [ "$1" == "--one-disk-only" -o "$1" == "-1" ] ; then
      USE_SEPARATE_DISKS=0
   elif [ "$1" == "--dry-run" -o "$1" == "-n" ] ; then
      DRY_RUN=1
   else
      echo >&2 "ERROR: Unknown option $1!"
      echo >&2 "Usage: $0"
      echo >&2 "   [--hypervisor|-H VirtualBox|QEMU]"
      echo >&2 "   [--project|-P Template|NEAT|MELODIC|...]"
      echo >&2 "   [--destination|-D Ubuntu|Fedora|FreeBSD]"
      echo >&2 "   [--release|-R RELEASE]"
      echo >&2 "   [--root|-r MiB]"
      echo >&2 "   [--home|-h MiB]"
      echo >&2 "   [--swap|-s MiB]"
      echo >&2 "   [--one-disk-only|-1]"
      echo >&2 "   [--video|-V WIDTHxHEIGHT|XGA|SXGA|HD|HD+|FHD|UHD]"
      echo >&2 "   [--keyboard-model|-m model]"
      echo >&2 "   [--keyboard-layout|-l layout]"
      echo >&2 "   [--keyboard-variant|-v variant]"
      echo >&2 "   [--keyboard-options|-o options]"
      echo >&2 "   [--dry-run|-n]"
      exit 1
   fi
   shift
done


# ###### Get configuration ##################################################
NAME=""
if [ "${HYPERVISOR}" == "VirtualBox" ] ; then
   BUILDER_VMSETUP="virtualbox"
   NAME="VirtualBox"
   PROVISIONERS="virtualbox-guest-utils ${PROVISIONERS}"
elif [ "${HYPERVISOR}" == "QEMU" ] ; then
   BUILDER_VMSETUP="qemu"
   NAME="QEMU"
else
   echo >&2 "ERROR: Invalid hypervisor ${HYPERVISOR}!"
   exit 1
fi

if [ "${PROJECT}" == "NorNet" ] ; then
   PROVISIONERS="${PROVISIONERS} nornet"
fi

PROVISIONERS="${PROVISIONERS} clean-up"
NAME="${NAME}-${PROJECT}"

if [ ${USE_SEPARATE_DISKS} -ne 0 ] ; then
   BUILDER_VMSETUP="${BUILDER_VMSETUP}-3disks"
fi

if [ "${DISTRIBUTION}" == "Ubuntu" ] ; then
   BUILDER_INSTALL="ubuntu-${RELEASE}"
   NAME="${NAME}-Ubuntu-${RELEASE}"
   HTTP_DIRECTORY="http/ubuntu"
   if [[ "${RELEASE}" =~ ^([0-9]*).([0-9]*)$ ]] ; then
      y=${BASH_REMATCH[1]}
      m=${BASH_REMATCH[2]}
      let isNonLTSYear=($y%2) || true
      if [ ${isNonLTSYear} -eq 0 -a $m -eq 4 ] ; then
         NAME="${NAME}-LTS"
         RELEASE="${RELEASE} LTS"
      fi
      if [ $y -lt 20 ] ; then
         HTTP_DIRECTORY="${HTTP_DIRECTORY}-legacy"
      fi
   else
      echo >&2 "ERROR: Invalid Ubuntu release ${RELEASE}!"
      exit 1
   fi
elif [ "${DISTRIBUTION}" == "Fedora" ] ; then
   BUILDER_INSTALL="fedora-${RELEASE}"
   NAME="${NAME}-Fedora-${RELEASE}"
   HTTP_DIRECTORY="http/fedora"
elif [ "${DISTRIBUTION}" == "FreeBSD" ] ; then
   BUILDER_INSTALL="freebsd-${RELEASE}"
   NAME="${NAME}-FreeBSD-${RELEASE}"
   HTTP_DIRECTORY="http/freebsd"
   if [[ "${RELEASE}" =~ ^([0-9]*).([0-9]*)$ ]] ; then
      major=${BASH_REMATCH[1]}
      minor=${BASH_REMATCH[2]}
   else
      echo >&2 "ERROR: Invalid FreeBSD release ${RELEASE}!"
      exit 1
   fi
else
   echo >&2 "ERROR: Invalid distribution ${DISTRIBUTION}!"
   exit 1
fi

if [ "${HTTP_DIRECTORY}" != "http/ubuntu-legacy" ] ; then
   if [ ${USE_SEPARATE_DISKS} -eq 0 ] ; then
      HTTP_DIRECTORY="${HTTP_DIRECTORY}-1disk"
   else
      HTTP_DIRECTORY="${HTTP_DIRECTORY}-3disks"
   fi
fi


# ###### Write Packer configuration #########################################
JSON="${NAME}.json"
JSONTMP="${JSON}.tmp"


# ====== Read and insert JSON block =========================================
insert-json()
{
   sed -e "/^[ \t]*\/\/.*$/d" <"$1" | jq . | \
      sed -e '1d; $d'
}

# ====== Variables ==========================================================
rm -f ${JSONTMP}
cat >>${JSONTMP} <<EOF
{
  "variables": {
    "version": ""
  },
EOF

# ====== Builders ===========================================================
cat >>${JSONTMP} <<EOF
  "builders": [
    {
EOF
if [ ! -d ${HTTP_DIRECTORY} ] ; then
   echo >&2 "ERROR: HTTP_DIRECTORY ${HTTP_DIRECTORY} does not exist!"
   exit 1
fi
(
   insert-json vmsetup/${BUILDER_VMSETUP}.json
   echo ","
   echo "\"http_directory\": \"${HTTP_DIRECTORY}\","
   insert-json installer/${BUILDER_INSTALL}.json
) >>${JSONTMP}
cat >>${JSONTMP} <<EOF
    }
  ],
EOF

# ====== Provisioners =======================================================
cat >>${JSONTMP} <<EOF
  "provisioners": [
EOF

p=0
for provisioner in ${PROVISIONERS} ; do
   if [ ! -e scripts/${provisioner} ] ; then
      echo >&2 "ERROR: Provisioner scripts/${provisioner} does not exist!"
      exit 1
   fi
   let p=$p+1
   if [ $p -gt 1 ] ; then
      echo "," >>${JSONTMP}
   fi
   cat >>${JSONTMP} <<EOF
       {
         "type": "shell",
         "execute_command": "echo '!NorNetInst!' | {{.Vars}} sudo -S -E bash '{{.Path}}'",
         "script": "scripts/${provisioner}"
       }
EOF
done

cat >>${JSONTMP} <<EOF
  ]
}
EOF


# ###### Clean up and check #################################################
jq . <${JSONTMP} >${JSON}


# ###### Run Packer #########################################################
vm_name="${NAME/${HYPERVISOR}-/}"
vm_version=`date +"%Y.%m.%d-%H%M%S"`
vm_product="${HYPERVISOR} ${PROJECT} VM with ${DISTRIBUTION} ${RELEASE}"
vm_producturl="https://www.nntb.no"
vm_vendor="Simula Research Laboratory"
vm_vendorurl="https://www.simula.no/people/dreibh"
vm_description="This is a ${PROJECT} VM with ${DISTRIBUTION} ${RELEASE} for ${HYPERVISOR}."


echo "Configuration:"
echo " - NAME=${NAME}"
echo " - VM_NAME=${vm_name}"
echo " - PROJECT=${PROJECT}"
echo " - DISTRIBUTION=${DISTRIBUTION}"
echo " - RELEASE=${RELEASE}"
echo " - PROVISIONERS=${PROVISIONERS}"
echo " - HTTP_DIRECTORY=${HTTP_DIRECTORY}"
echo " - VM_DISK_ROOT=${VM_DISK_ROOT} (MiB)"
if [ ${USE_SEPARATE_DISKS} -ne 0 ] ; then
   echo " - VM_DISK_HOME=${VM_DISK_HOME} (MiB)"
   echo " - VM_DISK_SWAP=${VM_DISK_SWAP} (MiB)"
fi
echo " - VIDEO=${VIDEO}"
echo " - XKBMODEL=${XKBMODEL}"
echo " - XKBLAYOUT=${XKBLAYOUT}"
echo " - XKBVARIANT=${XKBVARIANT}"
echo " - XKBOPTIONS=${XKBOPTIONS}"

if [ ${DRY_RUN} -ne 0 ] ; then
   echo "Dry run -> exiting."
   exit
fi


if [ ${HYPERVISOR} == "VirtualBox" ] ; then
   if [ "`lsmod|grep "^vboxdrv"`" == "" ] ; then
      echo "Need to load vboxdrv ..."
      sudo service virtualbox start || true
      sudo service vboxdrv start || true
   fi
   vboxmanage unregistervm ${vm_name} --delete || true
elif [ ${HYPERVISOR} == "QEMU" ] ; then
   if [ "`lsmod|grep "^vboxdrv"`" != "" ] ; then
      echo "Need to unload vboxdrv ..."
      sudo service virtualbox stop || true
      sudo service vboxdrv stop || true
   fi
fi

rm -rf ${vm_name}

echo "Running Packer:"
env CHECKPOINT_DISABLE=1 packer build      \
   -var "vm_name=${vm_name}"               \
   -var "vm_version=${vm_version}"         \
   -var "vm_version=${vm_version}"         \
   -var "vm_disk_root=${VM_DISK_ROOT}"     \
   -var "vm_disk_home=${VM_DISK_HOME}"     \
   -var "vm_disk_swap=${VM_DISK_SWAP}"     \
   -var "vm_video=${VIDEO}"                \
   -var "vm_vendor=${vm_vendor}"           \
   -var "vm_vendorurl=${vm_vendorurl}"     \
   -var "vm_product=${vm_product}"         \
   -var "vm_producturl=${vm_producturl}"   \
   ${JSON}
