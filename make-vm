#!/usr/bin/env bash
#
# Template VM Image Builder
# Copyright (C) 2017-2021 by Thomas Dreibholz
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Contact: dreibh@simula.no

set -e


# ###### Defaults ###########################################################
# PACKER="${HOME}/src/packer/bin/packer"
PACKER="/usr/bin/packer"

PROJECT="NorNet"
HYPERVISOR="VirtualBox"
DISTRIBUTION="Ubuntu"
RELEASE="20.04"
PROVISIONERS="user-settings"   # NOTE: "clean-up" will be added later!

DRY_RUN=0

VM_CHIPSET=ich9
VM_FIRMWARE=efi
VM_CORES=4
VM_MEMORY=4096

USE_SEPARATE_DISKS=1
VM_DISK_ROOT=32768
VM_DISK_HOME=131072
VM_DISK_SWAP=4096

VIDEO="1024x768"
XKBMODEL="pc105"
XKBLAYOUT="de"
XKBVARIANT="nodeadkeys"
XKBOPTIONS=""
FQDN="akerbrygge.simula.nornet"

USER_NAME="nornetpp"
USER_REALNAME="NorNet Praesum Presum"
USER_PASSWORD="!NorNetInst!"

BACKGROUND_SDDM="/usr/share/nornet-desktop/Desktop-with-Logo/Server1-3840x2160-plain.jpeg"
BACKGROUND_LOCKSCREEN="/usr/share/nornet-desktop/Desktop-with-Logo/FileSrv1-3840x2160-plain.jpeg"
BACKGROUND_DESKTOP="/usr/share/nornet-desktop/Desktop-with-Logo/Display1-3840x2160-plain.jpeg"

OUTPUT_DIRECTORY="."
CACHE_DIRECTORY="cache"
PACKER_LOG=0

VSPHERE_CONFIG_FILE=""
VSPHERE_VERSION="15"
VSPHERE_USERNAME="MY-VSPHERE-USERNAME"
VSPHERE_PASSWORD="MY-VSPHERE-PASSWORD"
VSPHERE_SERVER="MY-VSPHERE-SERVER"
VSPHERE_DATACENTER="MY-VSPHERE-DATACENTER"
VSPHERE_CLUSTER="MY-VSPHERE-CLUSTER"
VSPHERE_FOLDER="MY-VSPHERE-FOLDER"
VSPHERE_HOST="MY-VSPHERE-HOST"
VSPHERE_DATASTORE="MY-VSPHERE-DATASTORE"
VSPHERE_NETWORK="MY-VSPHERE-NETWORK"
VSPHERE_HTTP_IP="MY-VSPHERE-HTTP-IP"



# ###### Handle command-line parameters #####################################
while [ $# -gt 0 ] ; do
   if [ "$1" == "--output-directory" -o "$1" == "-O" ] ; then
      OUTPUT_DIRECTORY="$2"
      shift
   elif [ "$1" == "--cache-directory" -o "$1" == "-C" ] ; then
      CACHE_DIRECTORY="$2"
      shift
   elif [ "$1" == "--hypervisor" -o "$1" == "-H" ] ; then
      HYPERVISOR="$2"
      shift
   elif [ "$1" == "--project" -o "$1" == "-P" ] ; then
      PROJECT="$2"
      shift
   elif [ "$1" == "--distribution" -o "$1" == "-D" ] ; then
      DISTRIBUTION="$2"
      shift
   elif [ "$1" == "--release" -o "$1" == "-R" ] ; then
      RELEASE="$2"
      shift
   elif [ "$1" == "--system" -o "$1" == "-S" ] ; then
      DISTRIBUTION=`echo "$2" | sed -e "s/-.*$//g"`
      RELEASE=`echo "$2" | sed -e "s/^[^\-]*-//g"`
      shift
   elif [ "$1" == "--chipset" -o "$1" == "-I" ] ; then
      VM_CHIPSET="$2"
      if [[ ! "${VM_CHIPSET}" =~ ^ich9|piix3$ ]] ; then
         echo >&2 "ERROR: Bad chipset setting: ${VM_CHIPSET}"
         exit 1
      fi
      shift
   elif [ "$1" == "--firmware" -o "$1" == "-F" ] ; then
      VM_FIRMWARE="$2"
      if [[ ! "${VM_FIRMWARE}" =~ ^efi|bios$ ]] ; then
         echo >&2 "ERROR: Bad firmware setting: ${VM_FIRMWARE}"
         exit 1
      fi
      shift
   elif [ "$1" == "--cores" -o "$1" == "-c" ] ; then
      VM_CORES="$2"
      if [[ ! "${VM_CORES}" =~ ^[0-9]*$ ]] ; then
         echo >&2 "ERROR: Bad value for cores: ${VM_CORES}"
         exit 1
      fi
      if [ ${VM_CORES} -lt 1 ] ; then
         VM_CORES=1
      fi
      shift
   elif [ "$1" == "--memory" -o "$1" == "-m" ] ; then
      VM_MEMORY="$2"
      if [[ ! "${VM_MEMORY}" =~ ^[0-9]*$ ]] ; then
         echo >&2 "ERROR: Bad size for memory: ${VM_MEMORY} MiB"
         exit 1
      fi
      if [ ${VM_MEMORY} -lt 64 ] ; then
         VM_MEMORY=64
      fi
      shift
   elif [ "$1" == "--root" -o "$1" == "-r" ] ; then
      VM_DISK_ROOT="$2"
      if [[ ! "${VM_DISK_ROOT}" =~ ^[0-9]*$ ]] ; then
         echo >&2 "ERROR: Bad size for root: ${VM_DISK_ROOT} MiB"
         exit 1
      fi
      shift
   elif [ "$1" == "--home" -o "$1" == "-r" ] ; then
      VM_DISK_HOME="$2"
      if [[ ! "${VM_DISK_HOME}" =~ ^[0-9]*$ ]] ; then
         echo >&2 "ERROR: Bad size for home: ${VM_DISK_HOME} MiB"
         exit 1
      fi
      shift
   elif [ "$1" == "--swap" -o "$1" == "-r" ] ; then
      VM_DISK_SWAP="$2"
      if [[ ! "${VM_DISK_SWAP}" =~ ^[0-9]*$ ]] ; then
         echo >&2 "ERROR: Bad size for swap: ${VM_DISK_SWAP} MiB"
         exit 1
      fi
      shift
   elif [ "$1" == "--one-disk-only" -o "$1" == "-1" ] ; then
      USE_SEPARATE_DISKS=0
   elif [ "$1" == "--video" -o "$1" == "-V" ] ; then
      VIDEO="$2"
      if [ "${VIDEO}" == "XGA" ] ; then
         VIDEO="1024x768"   # Standard, 4:3
      elif [ "${VIDEO}" == "SXGA" ] ; then
         VIDEO="1280x960"   # SXGA, 4:3
      elif [ "${VIDEO}" == "HD" ] ; then
         VIDEO="1280x720"   # HD, 16:9
      elif [ "${VIDEO}" == "HD+" ] ; then
         VIDEO="1600x900"   # HD+, 16:9
      elif [ "${VIDEO}" == "FHD" ] ; then
         VIDEO="1920x1080"  # Full HD, 16:9
      elif [ "${VIDEO}" == "UHD" ] ; then
         VIDEO="3840x2160"  # 4K, 16:9
      fi
      if [[ ! "${VIDEO}" =~ ^[0-9]*x[0-9]*$ ]] ; then
         echo >&2 "ERROR: Bad video setting: ${VIDEO}"
         exit 1
      fi
      shift
   elif [ "$1" == "--keyboard-model" -o "$1" == "-m" ] ; then
      XKBMODEL="$2"
      shift
   elif [ "$1" == "--keyboard-layout" -o "$1" == "-l" ] ; then
      XKBLAYOUT="$2"
      shift
   elif [ "$1" == "--keyboard-variant" -o "$1" == "-v" ] ; then
      XKBVARIANT="$2"
      shift
   elif [ "$1" == "--keyboard-options" -o "$1" == "-o" ] ; then
      XKBOPTIONS="$2"
      shift
   elif [ "$1" == "--hostname" -o "$1" == "-h" ] ; then
      FQDN="$2"
      shift
   elif [ "$1" == "--username" -o "$1" == "-u" ] ; then
      USER_NAME="$2"
      shift
   elif [ "$1" == "--realname" -o "$1" == "-r" ] ; then
      USER_REALNAME="$2"
      shift
   elif [ "$1" == "--password" -o "$1" == "-p" ] ; then
      USER_PASSWORD="$2"
      shift
   elif [ "$1" == "--background-sddm" -o "$1" == "-BS" ] ; then
      BACKGROUND_SDDM="$2"
      shift
   elif [ "$1" == "--background-lockscreen" -o "$1" == "-BL" ] ; then
      BACKGROUND_LOCKSCREEN="$2"
      shift
   elif [ "$1" == "--background-desktop" -o "$1" == "-BD" ] ; then
      BACKGROUND_DESKTOP="$2"
      shift
   elif [ "$1" == "--vsphere" -o "$1" == "-VC" ] ; then
      if [ ! -e "$2" ] ; then
         echo "ERROR: vSphere configuration $2 not found!"
         exit 1
      fi
      VSPHERE_CONFIG_FILE="$2"
      shift
   elif [ "$1" == "--packer" -o "$1" == "-K" ] ; then
      PACKER="$2"
      shift
   elif [ "$1" == "--dry-run" -o "$1" == "-n" ] ; then
      DRY_RUN=1
   elif [ "$1" == "--verbose" -o "$1" == "-x" ] ; then
      PACKER_LOG=1
   else
      echo >&2 "ERROR: Unknown option $1!"
      echo >&2 "Usage: $0"
      echo >&2 "   [--output-directory|-O directory]"
      echo >&2 "   [--cache-directory|-C directory]"
      echo >&2 "   [--hypervisor|-H VirtualBox|QEMU|vSphere]"
      echo >&2 "   [--vsphere|-VC vsphere_configuration_file]"
      echo >&2 "   [--project|-P Template|NEAT|MELODIC|...]"
      echo >&2 "   [--destination|-D Ubuntu|Fedora|FreeBSD]"
      echo >&2 "   [--release|-R RELEASE]"
      echo >&2 "   [--system|-D DISTRIBUTION-RELEASE]"
      echo >&2 "   [--chipset|-I ich9|piix3]"
      echo >&2 "   [--firmware|-F efi|bios]"
      echo >&2 "   [--cores|-c cores]"
      echo >&2 "   [--memory|-m MiB]"
      echo >&2 "   [--root|-r MiB]"
      echo >&2 "   [--home|-h MiB]"
      echo >&2 "   [--swap|-s MiB]"
      echo >&2 "   [--one-disk-only|-1]"
      echo >&2 "   [--video|-V WIDTHxHEIGHT|XGA|SXGA|HD|HD+|FHD|UHD]"
      echo >&2 "   [--keyboard-model|-m model]"
      echo >&2 "   [--keyboard-layout|-l layout]"
      echo >&2 "   [--keyboard-variant|-v variant]"
      echo >&2 "   [--keyboard-options|-o options]"
      echo >&2 "   [--user|-u username]"
      echo >&2 "   [--realname|-r real_user_name]"
      echo >&2 "   [--password|-p password]"
      echo >&2 "   [--hostname|-h FQDN"
      echo >&2 "   [--background-sddm|-BD image_file]"
      echo >&2 "   [--background-lockscreen|-BL image_file]"
      echo >&2 "   [--background-desktop|-BD image_file]"
      echo >&2 "   [--packer|-K full_path_to_packer_executable]"
      echo >&2 "   [--dry-run|-n]"
      echo >&2 "   [--verbose|-x]"
      exit 1
   fi
   shift
done


# ###### Get configuration ##################################################
if [ ! -e "${PACKER}" ] ; then
   echo >&2 "ERROR: Packer (${PACKER}) not found!"
   exit 1
fi

NAME=""
if [ "${HYPERVISOR}" == "VirtualBox" ] ; then
   BUILDER_VMSETUP="virtualbox"
   NAME="VirtualBox"
   VM_DISK_PREFIX="sd"   # Using /dev/sd<N> for disks!
elif [ "${HYPERVISOR}" == "QEMU" ] ; then
   BUILDER_VMSETUP="qemu"
   NAME="QEMU"
   VM_DISK_PREFIX="vd"   # Using /dev/vd<N> for disks!
elif [ "${HYPERVISOR}" == "vSphere" ] ; then
   BUILDER_VMSETUP="vsphere"
   NAME="vSphere"
   VM_DISK_PREFIX="sd"   # Using /dev/sd<N> for disks!
   if [ "${VSPHERE_CONFIG_FILE}" == "" ] ; then
      echo >&2 "ERROR: No vSphere configuration file specified (--vsphere parameter)!"
      exit 1
   fi
   source "${VSPHERE_CONFIG_FILE}"
else
   echo >&2 "ERROR: Invalid hypervisor ${HYPERVISOR}!"
   exit 1
fi

projectConfiguration="projects/${PROJECT}.config"
if [[ "${projectConfiguration}" =~ ^.*-OpenStack.*$ ]] ; then
   projectConfiguration=${projectConfiguration/-OpenStack/}
   PROVISIONERS="prepare-openstack-guest ${PROVISIONERS}"
fi
if [ ! -e "${projectConfiguration}" ] ; then
   echo >&2 "ERROR: Configuration ${projectConfiguration} does not exist!"
   exit 1
fi
. "${projectConfiguration}"


if [ "${HYPERVISOR}" == "VirtualBox" ] ; then
   PROVISIONERS="${PROVISIONERS} install-virtualbox-guest-utils"
elif [ "${HYPERVISOR}" == "vSphere" ] ; then
   PROVISIONERS="${PROVISIONERS} install-vmware-guest-utils"
fi
PROVISIONERS="${PROVISIONERS} clean-up"
NAME="${NAME}-${PROJECT}"


if [ "`echo "${PROVISIONERS}" | xargs -n1 | sort`" !=  "`echo "${PROVISIONERS}" | xargs -n1 | sort -u`" ] ; then
   echo >&2 "ERROR: Some provisioners seem to be listed twice!"
   echo >&2 "PROVISIONERS=${PROVISIONERS}"
   exit 1
fi


if [ ${USE_SEPARATE_DISKS} -ne 0 ] ; then
   BUILDER_VMSETUP="${BUILDER_VMSETUP}-3disks"
fi

if [ "${DISTRIBUTION}" == "Ubuntu" ] ; then
   RELEASE="${RELEASE/-LTS/}"   # Remove "-LTS" from release
   BUILDER_INSTALL="ubuntu-${RELEASE}"
   NAME="${NAME}-Ubuntu-${RELEASE}"
   HTTP_DIRECTORY="http/ubuntu"
   if [[ "${RELEASE}" =~ ^([0-9]*).([0-9]*)$ ]] ; then
      y=${BASH_REMATCH[1]}
      m=${BASH_REMATCH[2]}
      let isNonLTSYear=($y%2) || true
      if [ ${isNonLTSYear} -eq 0 -a $m -eq 4 ] ; then
         NAME="${NAME}-LTS"
         RELEASE="${RELEASE} LTS"
      fi
      if [ $y -lt 20 ] ; then
         HTTP_DIRECTORY="${HTTP_DIRECTORY}-legacy"
      fi
   else
      echo >&2 "ERROR: Invalid Ubuntu release ${RELEASE}!"
      exit 1
   fi
elif [ "${DISTRIBUTION}" == "Debian" ] ; then
   BUILDER_INSTALL="debian-${RELEASE}"
   NAME="${NAME}-Debian-${RELEASE}"
   HTTP_DIRECTORY="http/debian"
   if [[ "${RELEASE}" =~ ^([0-9]*)$ ]] ; then
      RELEASE=${BASH_REMATCH[1]}
   elif [[ "${RELEASE}" =~ ^Testing$ ]] ; then
      RELEASE="Testing"
   else
      echo >&2 "ERROR: Invalid Debian release ${RELEASE}!"
      exit 1
   fi
elif [ "${DISTRIBUTION}" == "Fedora" ] ; then
   BUILDER_INSTALL="fedora-${RELEASE}"
   NAME="${NAME}-Fedora-${RELEASE}"
   HTTP_DIRECTORY="http/fedora"
elif [ "${DISTRIBUTION}" == "FreeBSD" ] ; then
   BUILDER_INSTALL="freebsd-${RELEASE}"
   NAME="${NAME}-FreeBSD-${RELEASE}"
   HTTP_DIRECTORY="http/freebsd"
   if [[ "${RELEASE}" =~ ^([0-9]*).([0-9]*)$ ]] ; then
      major=${BASH_REMATCH[1]}
      minor=${BASH_REMATCH[2]}
   else
      echo >&2 "ERROR: Invalid FreeBSD release ${RELEASE}!"
      exit 1
   fi
else
   echo >&2 "ERROR: Invalid distribution ${DISTRIBUTION}!"
   exit 1
fi

if [ "${HTTP_DIRECTORY}" != "http/ubuntu-legacy" -a  "${HTTP_DIRECTORY}" != "http/debian" ] ; then
   if [ ${USE_SEPARATE_DISKS} -eq 0 ] ; then
      HTTP_DIRECTORY="${HTTP_DIRECTORY}-1disk"
   else
      HTTP_DIRECTORY="${HTTP_DIRECTORY}-3disks"
   fi
fi

USER_HASHED_PASSWORD=`echo "${USER_PASSWORD}" | mkpasswd -s -m sha-512`
HOSTNAME=`echo "${FQDN}" | sed -e 's/\([a-zA-Z0-9]*\)\.\([a-zA-Z0-9\.]*\)/\1/g'`
DOMAINNAME=`echo "${FQDN}" | sed -e 's/\([a-zA-Z0-9]*\)\.\([a-zA-Z0-9\.]*\)/\2/g'`


# ###### Check Packer version ###############################################
packerVersion=`${PACKER} --version`
requiredMinVersion="1.7.1~"
check=`echo -e "${requiredMinVersion}\n${packerVersion}" | sort -V -r | head -n1`
if [ "${check}" == "${requiredMinVersion}" ] ; then
   echo >&2 "ERROR: Packer version ${packerVersion} is not suitable! Required is at least version ${requiredMinVersion}."
   exit 1
fi


# ###### Write Packer configuration #########################################
CACHE_DIRECTORY="`realpath "${CACHE_DIRECTORY}"`"
mkdir -p "${CACHE_DIRECTORY}"

mkdir -p "${OUTPUT_DIRECTORY}/${NAME}"
JSON="`realpath ${OUTPUT_DIRECTORY}/${NAME}`/${NAME}.json"
JSONTMP="${JSON}.tmp"


# ====== Read and insert JSON block =========================================
insert-json()
{
   sed -e "/^[ \t]*\/\/.*$/d" <"$1" | jq . | \
      sed -e '1d; $d'
}

# ====== Variables ==========================================================
rm -f ${JSONTMP}
cat >>${JSONTMP} <<EOF
{
  "variables": {
    "version": ""
  },
EOF

# ====== Builders ===========================================================
cat >>${JSONTMP} <<EOF
  "builders": [
    {
EOF
if [ ! -d "${HTTP_DIRECTORY}" ] ; then
   echo >&2 "ERROR: HTTP_DIRECTORY ${HTTP_DIRECTORY} does not exist!"
   exit 1
fi

# Copy all files from HTTP directory and replace placeholders:
mkdir -p "${OUTPUT_DIRECTORY}/${NAME}/http"
httpFiles=`find "${HTTP_DIRECTORY}/" -maxdepth 1 -type f -name "*"`
for httpFile in ${httpFiles} ; do
   echo "Processing: ${httpFile} -> ${NAME}/http/`basename ${httpFile}`"
   sed -e "s/<SET_DISK_PREFIX_HERE>/${VM_DISK_PREFIX}/g" \
       -e "s/<SET_XKBMODEL_HERE>/${XKBMODEL}/g" \
       -e "s/<SET_XKBLAYOUT_HERE>/${XKBLAYOUT}/g" \
       -e "s/<SET_XKBVARIANT_HERE>/${XKBVARIANT}/g" \
       -e "s/<SET_XKBOPTIONS_HERE>/${XKBOPTIONS}/g" \
       -e "s/<SET_HOSTFQDN_HERE>/${FQDN}/g" \
       -e "s/<SET_HOSTNAME_HERE>/${HOSTNAME}/g" \
       -e "s/<SET_DOMAINNAME_HERE>/${DOMAINNAME}/g" \
       -e "s/<SET_USERNAME_HERE>/${USER_NAME}/g" \
       -e "s/<SET_REALNAME_HERE>/${USER_REALNAME}/g" \
       -e "s/<SET_PASSWORD_HERE>/${USER_PASSWORD}/g" \
       -e "s#<SET_HASHED_PASSWORD_HERE>#${USER_HASHED_PASSWORD}#g" \
       <${httpFile} >"${OUTPUT_DIRECTORY}/${NAME}/http/`basename ${httpFile}`"
done

# Configure HTTP directory:
(
   insert-json vmsetup/${BUILDER_VMSETUP}.json
   echo ","
   echo "\"http_directory\": \"http\","
   insert-json installer/${BUILDER_INSTALL}.json
) >>${JSONTMP}
cat >>${JSONTMP} <<EOF
    }
  ],
EOF

# ====== Provisioners =======================================================
cat >>${JSONTMP} <<EOF
  "provisioners": [
EOF

p=0
for provisioner in ${PROVISIONERS} ; do
   if [ ! -e scripts/${provisioner} ] ; then
      echo >&2 "ERROR: Provisioner scripts/${provisioner} does not exist!"
      exit 1
   fi
   let p=$p+1
   if [ $p -gt 1 ] ; then
      echo "," >>${JSONTMP}
   fi
   cat >>${JSONTMP} <<EOF
       {
         "type": "shell",
         "execute_command": "echo '${USER_PASSWORD}' | {{.Vars}} sudo -S -E bash '{{.Path}}'",
         "script": "`realpath scripts/${provisioner}`",
         "environment_vars": [ "VIDEO=${VIDEO}",
                               "XKBMODEL=${XKBMODEL}",
                               "XKBLAYOUT=${XKBLAYOUT}",
                               "XKBVARIANT=${XKBVARIANT}",
                               "XKBOPTIONS=${XKBOPTIONS}",
                               "FQDN=${FQDN}",
                               "USER_NAME=${USER_NAME}",
                               "USER_REALNAME=${USER_REALNAME}",
                               "BACKGROUND_SDDM=${BACKGROUND_SDDM}",
                               "BACKGROUND_LOCKSCREEN=${BACKGROUND_LOCKSCREEN}",
                               "BACKGROUND_DESKTOP=${BACKGROUND_DESKTOP}" ]
       }
EOF
done

cat >>${JSONTMP} <<EOF
  ]
}
EOF


# ###### Clean up and check #################################################
jq . <${JSONTMP} >${JSON}
rm -f ${JSONTMP}


# ###### Run Packer #########################################################
vm_name="${NAME/${HYPERVISOR}-/}"
vm_version=`date +"%Y.%m.%d-%H%M%S"`
vm_product="${HYPERVISOR} ${PROJECT} VM with ${DISTRIBUTION} ${RELEASE}"
vm_producturl="https://www.nntb.no"
vm_vendor="Simula Research Laboratory"
vm_vendorurl="https://www.simula.no/people/dreibh"
vm_description="This is a ${PROJECT} VM with ${DISTRIBUTION} ${RELEASE} for ${HYPERVISOR}."


echo "Configuration:"
echo " - HYPERVISOR=${HYPERVISOR}"
echo " - NAME=${NAME}"
echo " - VM_NAME=${vm_name}"
echo " - PROJECT=${PROJECT}"
echo " - DISTRIBUTION=${DISTRIBUTION}"
echo " - RELEASE=${RELEASE}"
echo " - PROVISIONERS=${PROVISIONERS}"
echo " - HTTP_DIRECTORY=${HTTP_DIRECTORY}"
echo " - VM_CHIPSET=${VM_CHIPSET}"
echo " - VM_FIRMWARE=${VM_FIRMWARE}"
echo " - VM_CORES=${VM_CORES}"
echo " - VM_MEMORY=${VM_MEMORY} (MiB)"
echo " - VM_DISK_PREFIX=${VM_DISK_PREFIX}"
echo " - VM_DISK_ROOT=${VM_DISK_ROOT} (MiB)"
if [ ${USE_SEPARATE_DISKS} -ne 0 ] ; then
   echo " - VM_DISK_HOME=${VM_DISK_HOME} (MiB)"
   echo " - VM_DISK_SWAP=${VM_DISK_SWAP} (MiB)"
fi
echo " - VIDEO=${VIDEO}"
echo " - XKBMODEL=${XKBMODEL}"
echo " - XKBLAYOUT=${XKBLAYOUT}"
echo " - XKBVARIANT=${XKBVARIANT}"
echo " - XKBOPTIONS=${XKBOPTIONS}"
echo " - FQDN=${FQDN}"
echo " - HOSTNAME=${HOSTNAME}"
echo " - DOMAINNAME=${DOMAINNAME}"

if [ ${DRY_RUN} -ne 0 ] ; then
   echo "Dry run -> exiting."
   exit
fi

if [ ${HYPERVISOR} == "VirtualBox" ] ; then
   if [ "`lsmod|grep "^vboxdrv"`" == "" ] ; then
      echo "Need to load vboxdrv ..."
      sudo service virtualbox start || true
      sudo service vboxdrv start || true
   fi
   vboxmanage unregistervm ${vm_name} --delete || true
elif [ ${HYPERVISOR} == "QEMU" ] ; then
   if [ "`lsmod|grep "^vboxdrv"`" != "" ] ; then
      echo "Need to unload vboxdrv ..."
      sudo service virtualbox stop || true
      sudo service vboxdrv stop || true
   fi
fi


echo "Running Packer:"
cd "${OUTPUT_DIRECTORY}/${NAME}"
rm -rf "${vm_name}"
env CHECKPOINT_DISABLE=1 PACKER_LOG=${PACKER_LOG} PACKER_CACHE_DIR="${CACHE_DIRECTORY}" ${PACKER} build --force \
   -var "vm_directory=${OUTPUT_DIRECTORY}/${NAME}/${NAME}" \
   -var "vm_name=${vm_name}"               \
   -var "vm_version=${vm_version}"         \
   -var "vm_version=${vm_version}"         \
   -var "vm_chipset=${VM_CHIPSET}"         \
   -var "vm_firmware=${VM_FIRMWARE}"       \
   -var "vm_cores=${VM_CORES}"             \
   -var "vm_memory=${VM_MEMORY}"           \
   -var "vm_disk_prefix=${VM_DISK_PREFIX}" \
   -var "vm_disk_root=${VM_DISK_ROOT}"     \
   -var "vm_disk_home=${VM_DISK_HOME}"     \
   -var "vm_disk_swap=${VM_DISK_SWAP}"     \
   -var "vm_video=${VIDEO}"                \
   -var "vm_vendor=${vm_vendor}"           \
   -var "vm_vendorurl=${vm_vendorurl}"     \
   -var "vm_product=${vm_product}"         \
   -var "vm_producturl=${vm_producturl}"   \
   -var "host_name=${HOSTNAME}"            \
   -var "host_domain=${DOMAINNAME}"        \
   -var "user_name=${USER_NAME}"           \
   -var "user_realname=${USER_REALNAME}"   \
   -var "user_password=${USER_PASSWORD}"   \
   -var "vsphere_version=${VSPHERE_VERSION}"       \
   -var "vsphere_username=${VSPHERE_USERNAME}"     \
   -var "vsphere_password=${VSPHERE_PASSWORD}"     \
   -var "vsphere_server=${VSPHERE_SERVER}"         \
   -var "vsphere_datacenter=${VSPHERE_DATACENTER}" \
   -var "vsphere_cluster=${VSPHERE_CLUSTER}"       \
   -var "vsphere_folder=${VSPHERE_FOLDER}"         \
   -var "vsphere_host=${VSPHERE_HOST}"             \
   -var "vsphere_datastore=${VSPHERE_DATASTORE}"   \
   -var "vsphere_network=${VSPHERE_NETWORK}"       \
   -var "vsphere_http_ip=${VSPHERE_HTTP_IP}"       \
   -on-error=abort                                 \
   ${JSON}

(
   echo "TIMESTAMP=`env LANG=C date +"%Y/%m/%d-%H:%M:%S"`"
   if [ ${HYPERVISOR} == "VirtualBox" ] ; then
      echo "RESULT=`realpath --relative-to=. ${OUTPUT_DIRECTORY}/${NAME}/${NAME}/${vm_name}.ova`"
   elif [ ${HYPERVISOR} == "QEMU" ] ; then
      echo "RESULT=${OUTPUT_DIRECTORY}/${NAME}/${vm_name}/${vm_name}"
   elif [ ${HYPERVISOR} == "vSphere" ] ; then
      echo "RESULT=${OUTPUT_DIRECTORY}/${NAME}/${NAME}/${vm_name}   FIXME!"
   fi
) >successfully-built.txt

reset -I
echo ""
