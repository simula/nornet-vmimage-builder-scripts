#!/usr/bin/env bash
#
# Template VM Image Builder
# Copyright (C) 2017-2025 by Thomas Dreibholz
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Contact: thomas.dreibholz@gmail.com

set -eu

source ./directories.config

declare -A multiPlatformArray


# ====== Push containers ====================================================
print-utf8 -s "\e[34m====== Pushing Containers ... " "=" "\e[0m"

containers=$(find "${OUTPUT_DIRECTORY}" -mindepth 1 -maxdepth 1 -type d -name "Docker*")
for container in ${containers} ; do
   configurationFile="${container}/configuration.json"
   successfullyBuiltFile="${container}/successfully-built.txt"
   if [ -e "${configurationFile}" ] && [ -e "${successfullyBuiltFile}" ]  ; then
      repository="$(jq -r '."post-processors"[0][0].repository' "${configurationFile}")"
      tag="$(jq -r '."post-processors"[0][0].tags[0]' "${configurationFile}")"
      if [ "${repository}" != "" ] && [ "${tag}" != "" ] ; then
         print-utf8 -s "\e[33m------ Pushing ${repository}:${tag} ... " "-" "\e[0m"
         successfullyPushedFile="${container}/successfully-pushed.txt"
         if [ ! -e "${successfullyPushedFile}" ] ; then
            docker push "${repository}:${tag}" && date +"%Y-%m-%d %H:%M:%S" >"${successfullyPushedFile}"
         else
            echo "Already pushed -> nothing to do."
         fi
         parentTag="${tag/-*/}"
         parent="${repository}:${parentTag}"
         if [ "${parentTag}" != "${tag}" ] ; then
            if test -v multiPlatformArray["${parent}"] ; then
               multiPlatformArray[${parent}]="${multiPlatformArray[${parent}]} ${repository}:${tag}"
            else
               multiPlatformArray[${parent}]="${repository}:${tag}"
            fi
         else
            echo -e "\e[35m${container} does not have a platform-specific tag?!\e[0m"
         fi
      fi
   else
      echo -e "\e[35m${container} is not (yet) built!\e[0m"
   fi
done
echo ""


# ====== Join multi-platform tags to parent tag =============================
echo ""
print-utf8 -s "\e[34m====== Merging Multi-Platform Containers to Parent Tag ... " "=" "\e[0m"

parents=$(printf "%s\n" "${!multiPlatformArray[@]}" | sort)
for parent in ${parents} ; do
   print-utf8 -s "\e[33m------ Merging ${parent} ... " "-" "\e[0m"
   children=$(printf "%s\n" "${multiPlatformArray[${parent}]}" | sort)
   echo "Platform-specific tags: ${children}"
   # shellcheck disable=SC2086
   docker buildx imagetools create --tag \
      "${parent}" ${children}
done
